// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: proto/streamit.proto
// Protobuf C++ Version: 6.32.1

#include "proto/streamit.pb.h"

#include "google/protobuf/descriptor.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/wire_format_lite.h"
#include <algorithm>
#include <type_traits>
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace streamit {
namespace v1 {

inline constexpr RecordBatch::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      payload_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      base_offset_{::int64_t{0}}, crc32_{0u} {
}

template <typename>
PROTOBUF_CONSTEXPR RecordBatch::RecordBatch(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(RecordBatch_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RecordBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordBatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~RecordBatchDefaultTypeInternal() {
  }
  union {
    RecordBatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordBatchDefaultTypeInternal
    _RecordBatch_default_instance_;

inline constexpr Record::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, key_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      value_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      timestamp_ms_{::int64_t{0}} {
}

template <typename>
PROTOBUF_CONSTEXPR Record::Record(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Record_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~RecordDefaultTypeInternal() {
  }
  union {
    Record _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordDefaultTypeInternal
    _Record_default_instance_;

inline constexpr ProduceResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      leader_hint_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      base_offset_{::int64_t{0}}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)}, retry_after_ms_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR ProduceResponse::ProduceResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ProduceResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProduceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProduceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~ProduceResponseDefaultTypeInternal() {
  }
  union {
    ProduceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProduceResponseDefaultTypeInternal
    _ProduceResponse_default_instance_;

inline constexpr PollAssignmentResponse_Assignment::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, partitions_{}, _partitions_cached_byte_size_{0},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()) {
}

template <typename>
PROTOBUF_CONSTEXPR PollAssignmentResponse_Assignment::PollAssignmentResponse_Assignment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PollAssignmentResponse_Assignment_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PollAssignmentResponse_AssignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollAssignmentResponse_AssignmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~PollAssignmentResponse_AssignmentDefaultTypeInternal() {
  }
  union {
    PollAssignmentResponse_Assignment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    PollAssignmentResponse_AssignmentDefaultTypeInternal _PollAssignmentResponse_Assignment_default_instance_;

inline constexpr PollAssignmentRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, topics_{},
      group_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      member_id_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()) {
}

template <typename>
PROTOBUF_CONSTEXPR PollAssignmentRequest::PollAssignmentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PollAssignmentRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PollAssignmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollAssignmentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~PollAssignmentRequestDefaultTypeInternal() {
  }
  union {
    PollAssignmentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    PollAssignmentRequestDefaultTypeInternal _PollAssignmentRequest_default_instance_;

inline constexpr PartitionMetadata::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, replicas_{}, _replicas_cached_byte_size_{0}, isr_{}, _isr_cached_byte_size_{0}, partition_{0},
      leader_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR PartitionMetadata::PartitionMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PartitionMetadata_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PartitionMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~PartitionMetadataDefaultTypeInternal() {
  }
  union {
    PartitionMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionMetadataDefaultTypeInternal
    _PartitionMetadata_default_instance_;

inline constexpr FindLeaderResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      leader_host_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      leader_broker_id_{0}, leader_port_{0}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)} {
}

template <typename>
PROTOBUF_CONSTEXPR FindLeaderResponse::FindLeaderResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FindLeaderResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FindLeaderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindLeaderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~FindLeaderResponseDefaultTypeInternal() {
  }
  union {
    FindLeaderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindLeaderResponseDefaultTypeInternal
    _FindLeaderResponse_default_instance_;

inline constexpr FindLeaderRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()), partition_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR FindLeaderRequest::FindLeaderRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FindLeaderRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FindLeaderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindLeaderRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~FindLeaderRequestDefaultTypeInternal() {
  }
  union {
    FindLeaderRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindLeaderRequestDefaultTypeInternal
    _FindLeaderRequest_default_instance_;

inline constexpr FetchRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      offset_{::int64_t{0}}, partition_{0}, max_bytes_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR FetchRequest::FetchRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FetchRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FetchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~FetchRequestDefaultTypeInternal() {
  }
  union {
    FetchRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchRequestDefaultTypeInternal
    _FetchRequest_default_instance_;

inline constexpr DescribeTopicRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()) {
}

template <typename>
PROTOBUF_CONSTEXPR DescribeTopicRequest::DescribeTopicRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DescribeTopicRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DescribeTopicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeTopicRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~DescribeTopicRequestDefaultTypeInternal() {
  }
  union {
    DescribeTopicRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    DescribeTopicRequestDefaultTypeInternal _DescribeTopicRequest_default_instance_;

inline constexpr CreateTopicResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      success_{false}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)} {
}

template <typename>
PROTOBUF_CONSTEXPR CreateTopicResponse::CreateTopicResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CreateTopicResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateTopicResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTopicResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~CreateTopicResponseDefaultTypeInternal() {
  }
  union {
    CreateTopicResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    CreateTopicResponseDefaultTypeInternal _CreateTopicResponse_default_instance_;

inline constexpr CreateTopicRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()), partitions_{0},
      replication_factor_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR CreateTopicRequest::CreateTopicRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CreateTopicRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateTopicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTopicRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~CreateTopicRequestDefaultTypeInternal() {
  }
  union {
    CreateTopicRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTopicRequestDefaultTypeInternal
    _CreateTopicRequest_default_instance_;

inline constexpr CommitOffsetResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      error_code_{static_cast<::streamit::v1::ErrorCode>(0)} {
}

template <typename>
PROTOBUF_CONSTEXPR CommitOffsetResponse::CommitOffsetResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CommitOffsetResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitOffsetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitOffsetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~CommitOffsetResponseDefaultTypeInternal() {
  }
  union {
    CommitOffsetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    CommitOffsetResponseDefaultTypeInternal _CommitOffsetResponse_default_instance_;

inline constexpr CommitOffsetRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      group_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      offset_{::int64_t{0}}, partition_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR CommitOffsetRequest::CommitOffsetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CommitOffsetRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CommitOffsetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitOffsetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~CommitOffsetRequestDefaultTypeInternal() {
  }
  union {
    CommitOffsetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    CommitOffsetRequestDefaultTypeInternal _CommitOffsetRequest_default_instance_;

inline constexpr TopicMetadata::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, partition_metadata_{},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()), partitions_{0},
      replication_factor_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR TopicMetadata::TopicMetadata(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(TopicMetadata_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TopicMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~TopicMetadataDefaultTypeInternal() {
  }
  union {
    TopicMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicMetadataDefaultTypeInternal
    _TopicMetadata_default_instance_;

inline constexpr ProduceRequest::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, records_{},
      topic_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      producer_id_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      partition_{0}, ack_{static_cast<::streamit::v1::Ack>(0)}, sequence_{::int64_t{0}} {
}

template <typename>
PROTOBUF_CONSTEXPR ProduceRequest::ProduceRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(ProduceRequest_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ProduceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProduceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~ProduceRequestDefaultTypeInternal() {
  }
  union {
    ProduceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProduceRequestDefaultTypeInternal
    _ProduceRequest_default_instance_;

inline constexpr PollAssignmentResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, assignments_{},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      heartbeat_interval_ms_{0}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)} {
}

template <typename>
PROTOBUF_CONSTEXPR PollAssignmentResponse::PollAssignmentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(PollAssignmentResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PollAssignmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollAssignmentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~PollAssignmentResponseDefaultTypeInternal() {
  }
  union {
    PollAssignmentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    PollAssignmentResponseDefaultTypeInternal _PollAssignmentResponse_default_instance_;

inline constexpr FetchResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0}, batches_{},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      leader_hint_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      high_watermark_{::int64_t{0}}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)}, retry_after_ms_{0} {
}

template <typename>
PROTOBUF_CONSTEXPR FetchResponse::FetchResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(FetchResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FetchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~FetchResponseDefaultTypeInternal() {
  }
  union {
    FetchResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchResponseDefaultTypeInternal
    _FetchResponse_default_instance_;

inline constexpr DescribeTopicResponse::Impl_::Impl_(::_pbi::ConstantInitialized) noexcept
    : _cached_size_{0},
      error_message_(&::google::protobuf::internal::fixed_address_empty_string, ::_pbi::ConstantInitialized()),
      metadata_{nullptr}, error_code_{static_cast<::streamit::v1::ErrorCode>(0)} {
}

template <typename>
PROTOBUF_CONSTEXPR DescribeTopicResponse::DescribeTopicResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(DescribeTopicResponse_class_data_.base()),
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DescribeTopicResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DescribeTopicResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {
  }
  ~DescribeTopicResponseDefaultTypeInternal() {
  }
  union {
    DescribeTopicResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
    DescribeTopicResponseDefaultTypeInternal _DescribeTopicResponse_default_instance_;
} // namespace v1
} // namespace streamit
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL file_level_enum_descriptors_proto_2fstreamit_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor* PROTOBUF_NONNULL* PROTOBUF_NULLABLE
    file_level_service_descriptors_proto_2fstreamit_2eproto = nullptr;
const ::uint32_t TableStruct_proto_2fstreamit_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::Record, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::Record, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::Record, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::Record, _impl_.timestamp_ms_),
    0,
    1,
    2,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::RecordBatch, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::RecordBatch, _impl_.base_offset_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::RecordBatch, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::RecordBatch, _impl_.crc32_),
    1,
    0,
    2,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_._has_bits_),
    9, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.partition_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.records_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.ack_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.producer_id_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceRequest, _impl_.sequence_),
    0,
    2,
    ~0u,
    3,
    1,
    4,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_._has_bits_),
    8, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_.base_offset_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_.retry_after_ms_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::ProduceResponse, _impl_.leader_hint_),
    2,
    3,
    0,
    4,
    1,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchRequest, _impl_._has_bits_),
    7, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchRequest, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchRequest, _impl_.partition_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchRequest, _impl_.offset_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchRequest, _impl_.max_bytes_),
    0,
    2,
    1,
    3,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_._has_bits_),
    9, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.high_watermark_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.batches_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.retry_after_ms_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FetchResponse, _impl_.leader_hint_),
    2,
    ~0u,
    3,
    0,
    4,
    1,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetRequest, _impl_._has_bits_),
    7, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetRequest, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetRequest, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetRequest, _impl_.partition_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetRequest, _impl_.offset_),
    0,
    1,
    3,
    2,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetResponse, _impl_._has_bits_),
    5, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CommitOffsetResponse, _impl_.error_message_),
    1,
    0,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentRequest, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentRequest, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentRequest, _impl_.member_id_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentRequest, _impl_.topics_),
    0,
    1,
    ~0u,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse_Assignment, _impl_._has_bits_),
    5, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse_Assignment, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse_Assignment, _impl_.partitions_),
    0,
    ~0u,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse, _impl_._has_bits_),
    7, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse, _impl_.assignments_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse, _impl_.heartbeat_interval_ms_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PollAssignmentResponse, _impl_.error_message_),
    ~0u,
    1,
    2,
    0,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicRequest, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicRequest, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicRequest, _impl_.partitions_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicRequest, _impl_.replication_factor_),
    0,
    1,
    2,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicResponse, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::CreateTopicResponse, _impl_.error_code_),
    1,
    0,
    2,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::TopicMetadata, _impl_._has_bits_),
    7, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::TopicMetadata, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::TopicMetadata, _impl_.partitions_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::TopicMetadata, _impl_.replication_factor_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::TopicMetadata, _impl_.partition_metadata_),
    0,
    1,
    2,
    ~0u,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PartitionMetadata, _impl_._has_bits_),
    7, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PartitionMetadata, _impl_.partition_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PartitionMetadata, _impl_.leader_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PartitionMetadata, _impl_.replicas_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::PartitionMetadata, _impl_.isr_),
    0,
    1,
    ~0u,
    ~0u,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicRequest, _impl_._has_bits_),
    4, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicRequest, _impl_.topic_),
    0,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicResponse, _impl_._has_bits_),
    6, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicResponse, _impl_.metadata_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::DescribeTopicResponse, _impl_.error_message_),
    1,
    2,
    0,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderRequest, _impl_._has_bits_),
    5, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderRequest, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderRequest, _impl_.partition_),
    0,
    1,
    0x081, // bitmap
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_._has_bits_),
    8, // hasbit index offset
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_.leader_broker_id_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_.leader_host_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_.leader_port_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::streamit::v1::FindLeaderResponse, _impl_.error_message_),
    2,
    0,
    3,
    4,
    1,
};

static const ::_pbi::MigrationSchema schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    {0, sizeof(::streamit::v1::Record)},
    {9, sizeof(::streamit::v1::RecordBatch)},
    {18, sizeof(::streamit::v1::ProduceRequest)},
    {33, sizeof(::streamit::v1::ProduceResponse)},
    {46, sizeof(::streamit::v1::FetchRequest)},
    {57, sizeof(::streamit::v1::FetchResponse)},
    {72, sizeof(::streamit::v1::CommitOffsetRequest)},
    {83, sizeof(::streamit::v1::CommitOffsetResponse)},
    {90, sizeof(::streamit::v1::PollAssignmentRequest)},
    {99, sizeof(::streamit::v1::PollAssignmentResponse_Assignment)},
    {106, sizeof(::streamit::v1::PollAssignmentResponse)},
    {117, sizeof(::streamit::v1::CreateTopicRequest)},
    {126, sizeof(::streamit::v1::CreateTopicResponse)},
    {135, sizeof(::streamit::v1::TopicMetadata)},
    {146, sizeof(::streamit::v1::PartitionMetadata)},
    {157, sizeof(::streamit::v1::DescribeTopicRequest)},
    {162, sizeof(::streamit::v1::DescribeTopicResponse)},
    {171, sizeof(::streamit::v1::FindLeaderRequest)},
    {178, sizeof(::streamit::v1::FindLeaderResponse)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::streamit::v1::_Record_default_instance_._instance,
    &::streamit::v1::_RecordBatch_default_instance_._instance,
    &::streamit::v1::_ProduceRequest_default_instance_._instance,
    &::streamit::v1::_ProduceResponse_default_instance_._instance,
    &::streamit::v1::_FetchRequest_default_instance_._instance,
    &::streamit::v1::_FetchResponse_default_instance_._instance,
    &::streamit::v1::_CommitOffsetRequest_default_instance_._instance,
    &::streamit::v1::_CommitOffsetResponse_default_instance_._instance,
    &::streamit::v1::_PollAssignmentRequest_default_instance_._instance,
    &::streamit::v1::_PollAssignmentResponse_Assignment_default_instance_._instance,
    &::streamit::v1::_PollAssignmentResponse_default_instance_._instance,
    &::streamit::v1::_CreateTopicRequest_default_instance_._instance,
    &::streamit::v1::_CreateTopicResponse_default_instance_._instance,
    &::streamit::v1::_TopicMetadata_default_instance_._instance,
    &::streamit::v1::_PartitionMetadata_default_instance_._instance,
    &::streamit::v1::_DescribeTopicRequest_default_instance_._instance,
    &::streamit::v1::_DescribeTopicResponse_default_instance_._instance,
    &::streamit::v1::_FindLeaderRequest_default_instance_._instance,
    &::streamit::v1::_FindLeaderResponse_default_instance_._instance,
};
const char descriptor_table_protodef_proto_2fstreamit_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024proto/streamit.proto\022\013streamit.v1\":\n\006R"
    "ecord\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\024\n\014tim"
    "estamp_ms\030\003 \001(\003\"B\n\013RecordBatch\022\023\n\013base_o"
    "ffset\030\001 \001(\003\022\017\n\007payload\030\002 \001(\014\022\r\n\005crc32\030\003 "
    "\001(\r\"\236\001\n\016ProduceRequest\022\r\n\005topic\030\001 \001(\t\022\021\n"
    "\tpartition\030\002 \001(\005\022$\n\007records\030\003 \003(\0132\023.stre"
    "amit.v1.Record\022\035\n\003ack\030\004 \001(\0162\020.streamit.v"
    "1.Ack\022\023\n\013producer_id\030\005 \001(\t\022\020\n\010sequence\030\006"
    " \001(\003\"\226\001\n\017ProduceResponse\022\023\n\013base_offset\030"
    "\001 \001(\003\022*\n\nerror_code\030\002 \001(\0162\026.streamit.v1."
    "ErrorCode\022\025\n\rerror_message\030\003 \001(\t\022\026\n\016retr"
    "y_after_ms\030\004 \001(\005\022\023\n\013leader_hint\030\005 \001(\t\"S\n"
    "\014FetchRequest\022\r\n\005topic\030\001 \001(\t\022\021\n\tpartitio"
    "n\030\002 \001(\005\022\016\n\006offset\030\003 \001(\003\022\021\n\tmax_bytes\030\004 \001"
    "(\005\"\302\001\n\rFetchResponse\022\026\n\016high_watermark\030\001"
    " \001(\003\022)\n\007batches\030\002 \003(\0132\030.streamit.v1.Reco"
    "rdBatch\022*\n\nerror_code\030\003 \001(\0162\026.streamit.v"
    "1.ErrorCode\022\025\n\rerror_message\030\004 \001(\t\022\026\n\016re"
    "try_after_ms\030\005 \001(\005\022\023\n\013leader_hint\030\006 \001(\t\""
    "V\n\023CommitOffsetRequest\022\r\n\005group\030\001 \001(\t\022\r\n"
    "\005topic\030\002 \001(\t\022\021\n\tpartition\030\003 \001(\005\022\016\n\006offse"
    "t\030\004 \001(\003\"Y\n\024CommitOffsetResponse\022*\n\nerror"
    "_code\030\001 \001(\0162\026.streamit.v1.ErrorCode\022\025\n\re"
    "rror_message\030\002 \001(\t\"I\n\025PollAssignmentRequ"
    "est\022\r\n\005group\030\001 \001(\t\022\021\n\tmember_id\030\002 \001(\t\022\016\n"
    "\006topics\030\003 \003(\t\"\360\001\n\026PollAssignmentResponse"
    "\022C\n\013assignments\030\001 \003(\0132..streamit.v1.Poll"
    "AssignmentResponse.Assignment\022\035\n\025heartbe"
    "at_interval_ms\030\002 \001(\005\022*\n\nerror_code\030\003 \001(\016"
    "2\026.streamit.v1.ErrorCode\022\025\n\rerror_messag"
    "e\030\004 \001(\t\032/\n\nAssignment\022\r\n\005topic\030\001 \001(\t\022\022\n\n"
    "partitions\030\002 \003(\005\"S\n\022CreateTopicRequest\022\r"
    "\n\005topic\030\001 \001(\t\022\022\n\npartitions\030\002 \001(\005\022\032\n\022rep"
    "lication_factor\030\003 \001(\005\"i\n\023CreateTopicResp"
    "onse\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_message\030\002"
    " \001(\t\022*\n\nerror_code\030\003 \001(\0162\026.streamit.v1.E"
    "rrorCode\"\212\001\n\rTopicMetadata\022\r\n\005topic\030\001 \001("
    "\t\022\022\n\npartitions\030\002 \001(\005\022\032\n\022replication_fac"
    "tor\030\003 \001(\005\022:\n\022partition_metadata\030\004 \003(\0132\036."
    "streamit.v1.PartitionMetadata\"U\n\021Partiti"
    "onMetadata\022\021\n\tpartition\030\001 \001(\005\022\016\n\006leader\030"
    "\002 \001(\005\022\020\n\010replicas\030\003 \003(\005\022\013\n\003isr\030\004 \003(\005\"%\n\024"
    "DescribeTopicRequest\022\r\n\005topic\030\001 \001(\t\"\210\001\n\025"
    "DescribeTopicResponse\022,\n\010metadata\030\001 \001(\0132"
    "\032.streamit.v1.TopicMetadata\022*\n\nerror_cod"
    "e\030\002 \001(\0162\026.streamit.v1.ErrorCode\022\025\n\rerror"
    "_message\030\003 \001(\t\"5\n\021FindLeaderRequest\022\r\n\005t"
    "opic\030\001 \001(\t\022\021\n\tpartition\030\002 \001(\005\"\233\001\n\022FindLe"
    "aderResponse\022\030\n\020leader_broker_id\030\001 \001(\005\022\023"
    "\n\013leader_host\030\002 \001(\t\022\023\n\013leader_port\030\003 \001(\005"
    "\022*\n\nerror_code\030\004 \001(\0162\026.streamit.v1.Error"
    "Code\022\025\n\rerror_message\030\005 \001(\t*%\n\003Ack\022\016\n\nAC"
    "K_LEADER\020\000\022\016\n\nACK_QUORUM\020\001*\221\003\n\tErrorCode"
    "\022\006\n\002OK\020\000\022\r\n\tTHROTTLED\020\001\022\016\n\nNOT_LEADER\020\002\022"
    "\021\n\rUNKNOWN_TOPIC\020\003\022\027\n\023OFFSET_OUT_OF_RANG"
    "E\020\004\022\025\n\021IDEMPOTENT_REPLAY\020\005\022\014\n\010INTERNAL\020\006"
    "\022\024\n\020INVALID_ARGUMENT\020\007\022\r\n\tNOT_FOUND\020\010\022\022\n"
    "\016ALREADY_EXISTS\020\t\022\025\n\021PERMISSION_DENIED\020\n"
    "\022\026\n\022RESOURCE_EXHAUSTED\020\013\022\027\n\023FAILED_PRECO"
    "NDITION\020\014\022\020\n\014OUT_OF_RANGE\020\r\022\021\n\rUNIMPLEME"
    "NTED\020\016\022\017\n\013UNAVAILABLE\020\017\022\r\n\tDATA_LOSS\020\020\022\023"
    "\n\017UNAUTHENTICATED\020\021\022\025\n\021DEADLINE_EXCEEDED"
    "\020\022\022\r\n\tCANCELLED\020\023\022\013\n\007UNKNOWN\020\0242\216\001\n\006Broke"
    "r\022D\n\007Produce\022\033.streamit.v1.ProduceReques"
    "t\032\034.streamit.v1.ProduceResponse\022>\n\005Fetch"
    "\022\031.streamit.v1.FetchRequest\032\032.streamit.v"
    "1.FetchResponse2\275\001\n\013Coordinator\022S\n\014Commi"
    "tOffset\022 .streamit.v1.CommitOffsetReques"
    "t\032!.streamit.v1.CommitOffsetResponse\022Y\n\016"
    "PollAssignment\022\".streamit.v1.PollAssignm"
    "entRequest\032#.streamit.v1.PollAssignmentR"
    "esponse2\205\002\n\nController\022P\n\013CreateTopic\022\037."
    "streamit.v1.CreateTopicRequest\032 .streami"
    "t.v1.CreateTopicResponse\022V\n\rDescribeTopi"
    "c\022!.streamit.v1.DescribeTopicRequest\032\".s"
    "treamit.v1.DescribeTopicResponse\022M\n\nFind"
    "Leader\022\036.streamit.v1.FindLeaderRequest\032\037"
    ".streamit.v1.FindLeaderResponseB\'Z%githu"
    "b.com/streamit/proto/streamit/v1b\006proto3"};
static ::absl::once_flag descriptor_table_proto_2fstreamit_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_proto_2fstreamit_2eproto = {
    false,
    false,
    3160,
    descriptor_table_protodef_proto_2fstreamit_2eproto,
    "proto/streamit.proto",
    &descriptor_table_proto_2fstreamit_2eproto_once,
    nullptr,
    0,
    19,
    schemas,
    file_default_instances,
    TableStruct_proto_2fstreamit_2eproto::offsets,
    file_level_enum_descriptors_proto_2fstreamit_2eproto,
    file_level_service_descriptors_proto_2fstreamit_2eproto,
};
namespace streamit {
namespace v1 {
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL Ack_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2fstreamit_2eproto);
  return file_level_enum_descriptors_proto_2fstreamit_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t Ack_internal_data_[] = {
    131072u,
    0u,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_proto_2fstreamit_2eproto);
  return file_level_enum_descriptors_proto_2fstreamit_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCode_internal_data_[] = {
    1376256u,
    0u,
};
// ===================================================================

class Record::_Internal {
public:
  using HasBits = decltype(::std::declval<Record>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(Record, _impl_._has_bits_);
};

Record::Record(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Record_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.Record)
}
PROTOBUF_NDEBUG_INLINE Record::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::Record& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, key_(arena, from.key_), value_(arena, from.value_) {
}

Record::Record(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Record& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Record_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  Record* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.timestamp_ms_ = from._impl_.timestamp_ms_;

  // @@protoc_insertion_point(copy_constructor:streamit.v1.Record)
}
PROTOBUF_NDEBUG_INLINE Record::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, key_(arena), value_(arena) {
}

inline void Record::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ms_ = {};
}
Record::~Record() {
  // @@protoc_insertion_point(destructor:streamit.v1.Record)
  SharedDtor(*this);
}
inline void Record::SharedDtor(MessageLite& self) {
  Record& this_ = static_cast<Record&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_.Destroy();
  this_._impl_.value_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL Record::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) Record(arena);
}
constexpr auto Record::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Record), alignof(Record));
}
constexpr auto Record::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Record_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &Record::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Record>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Record::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Record>(),
          &Record::ByteSizeLong,
          &Record::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Record, _impl_._cached_size_),
          false,
      },
      &Record::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    Record_class_data_ = Record::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL Record::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Record_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Record_class_data_.tc_table);
  return Record_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Record::_table_ = {
    {
        PROTOBUF_FIELD_OFFSET(Record, _impl_._has_bits_),
        0, // no _extensions_
        3,
        24, // max_field_number, fast_idx_mask
        offsetof(decltype(_table_), field_lookup_table),
        4294967288, // skipmap
        offsetof(decltype(_table_), field_entries),
        3,                                        // num_field_entries
        0,                                        // num_aux_entries
        offsetof(decltype(_table_), field_names), // no aux_entries
        Record_class_data_.base(),
        nullptr,                           // post_loop_handler
        ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
        ::_pbi::TcParser::GetTable<::streamit::v1::Record>(), // to_prefetch
#endif                                                        // PROTOBUF_PREFETCH_PARSE_TABLE
    },
    {{
        {::_pbi::TcParser::MiniParse, {}},
        // bytes key = 1;
        {::_pbi::TcParser::FastBS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(Record, _impl_.key_)}},
        // bytes value = 2;
        {::_pbi::TcParser::FastBS1, {18, 1, 0, PROTOBUF_FIELD_OFFSET(Record, _impl_.value_)}},
        // int64 timestamp_ms = 3;
        {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Record, _impl_.timestamp_ms_), 2>(),
         {24, 2, 0, PROTOBUF_FIELD_OFFSET(Record, _impl_.timestamp_ms_)}},
    }},
    {{65535, 65535}},
    {{
        // bytes key = 1;
        {PROTOBUF_FIELD_OFFSET(Record, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
        // bytes value = 2;
        {PROTOBUF_FIELD_OFFSET(Record, _impl_.value_), _Internal::kHasBitsOffset + 1, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
        // int64 timestamp_ms = 3;
        {PROTOBUF_FIELD_OFFSET(Record, _impl_.timestamp_ms_), _Internal::kHasBitsOffset + 2, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    }},
    // no aux_entries
    {{}},
};
PROTOBUF_NOINLINE void Record::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.Record)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.timestamp_ms_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
Record::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                           ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const Record& this_ = static_cast<const Record&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL Record::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const Record& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.Record)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes key = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_key().empty()) {
      const ::std::string& _s = this_._internal_key();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
    }
  }

  // bytes value = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_value().empty()) {
      const ::std::string& _s = this_._internal_value();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // int64 timestamp_ms = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_timestamp_ms() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
          stream, this_._internal_timestamp_ms(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.Record)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t Record::ByteSizeLong(const MessageLite& base) {
  const Record& this_ = static_cast<const Record&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t Record::ByteSizeLong() const {
  const Record& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.Record)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // bytes key = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_key().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this_._internal_key());
      }
    }
    // bytes value = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_value().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this_._internal_value());
      }
    }
    // int64 timestamp_ms = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_timestamp_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_timestamp_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void Record::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Record*>(&to_msg);
  auto& from = static_cast<const Record&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.Record)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_key().empty()) {
        _this->_internal_set_key(from._internal_key());
      } else {
        if (_this->_impl_.key_.IsDefault()) {
          _this->_internal_set_key("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_value().empty()) {
        _this->_internal_set_value(from._internal_value());
      } else {
        if (_this->_impl_.value_.IsDefault()) {
          _this->_internal_set_value("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_timestamp_ms() != 0) {
        _this->_impl_.timestamp_ms_ = from._impl_.timestamp_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Record::CopyFrom(const Record& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.Record)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void Record::InternalSwap(Record* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
  swap(_impl_.timestamp_ms_, other->_impl_.timestamp_ms_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class RecordBatch::_Internal {
public:
  using HasBits = decltype(::std::declval<RecordBatch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_._has_bits_);
};

RecordBatch::RecordBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RecordBatch_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.RecordBatch)
}
PROTOBUF_NDEBUG_INLINE RecordBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::RecordBatch& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, payload_(arena, from.payload_) {
}

RecordBatch::RecordBatch(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const RecordBatch& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, RecordBatch_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  RecordBatch* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, base_offset_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, base_offset_),
           offsetof(Impl_, crc32_) - offsetof(Impl_, base_offset_) + sizeof(Impl_::crc32_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.RecordBatch)
}
PROTOBUF_NDEBUG_INLINE RecordBatch::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, payload_(arena) {
}

inline void RecordBatch::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, base_offset_), 0,
           offsetof(Impl_, crc32_) - offsetof(Impl_, base_offset_) + sizeof(Impl_::crc32_));
}
RecordBatch::~RecordBatch() {
  // @@protoc_insertion_point(destructor:streamit.v1.RecordBatch)
  SharedDtor(*this);
}
inline void RecordBatch::SharedDtor(MessageLite& self) {
  RecordBatch& this_ = static_cast<RecordBatch&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.payload_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL RecordBatch::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                         ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) RecordBatch(arena);
}
constexpr auto RecordBatch::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(RecordBatch), alignof(RecordBatch));
}
constexpr auto RecordBatch::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_RecordBatch_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &RecordBatch::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<RecordBatch>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &RecordBatch::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<RecordBatch>(),
          &RecordBatch::ByteSizeLong,
          &RecordBatch::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_._cached_size_),
          false,
      },
      &RecordBatch::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    RecordBatch_class_data_ = RecordBatch::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
RecordBatch::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&RecordBatch_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(RecordBatch_class_data_.tc_table);
  return RecordBatch_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 0, 0, 2> RecordBatch::_table_ = {
    {
        PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_._has_bits_),
        0, // no _extensions_
        3,
        24, // max_field_number, fast_idx_mask
        offsetof(decltype(_table_), field_lookup_table),
        4294967288, // skipmap
        offsetof(decltype(_table_), field_entries),
        3,                                        // num_field_entries
        0,                                        // num_aux_entries
        offsetof(decltype(_table_), field_names), // no aux_entries
        RecordBatch_class_data_.base(),
        nullptr,                           // post_loop_handler
        ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
        ::_pbi::TcParser::GetTable<::streamit::v1::RecordBatch>(), // to_prefetch
#endif                                                             // PROTOBUF_PREFETCH_PARSE_TABLE
    },
    {{
        {::_pbi::TcParser::MiniParse, {}},
        // int64 base_offset = 1;
        {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(RecordBatch, _impl_.base_offset_), 1>(),
         {8, 1, 0, PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.base_offset_)}},
        // bytes payload = 2;
        {::_pbi::TcParser::FastBS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.payload_)}},
        // uint32 crc32 = 3;
        {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RecordBatch, _impl_.crc32_), 2>(),
         {24, 2, 0, PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.crc32_)}},
    }},
    {{65535, 65535}},
    {{
        // int64 base_offset = 1;
        {PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.base_offset_), _Internal::kHasBitsOffset + 1, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
        // bytes payload = 2;
        {PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.payload_), _Internal::kHasBitsOffset + 0, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
        // uint32 crc32 = 3;
        {PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.crc32_), _Internal::kHasBitsOffset + 2, 0,
         (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    }},
    // no aux_entries
    {{}},
};
PROTOBUF_NOINLINE void RecordBatch::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.RecordBatch)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.payload_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006U) != 0) {
    ::memset(
        &_impl_.base_offset_, 0,
        static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.crc32_) - reinterpret_cast<char*>(&_impl_.base_offset_)) +
            sizeof(_impl_.crc32_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
RecordBatch::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const RecordBatch& this_ = static_cast<const RecordBatch&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL RecordBatch::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const RecordBatch& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.RecordBatch)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 base_offset = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_base_offset() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
          stream, this_._internal_base_offset(), target);
    }
  }

  // bytes payload = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_payload().empty()) {
      const ::std::string& _s = this_._internal_payload();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
    }
  }

  // uint32 crc32 = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_crc32() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this_._internal_crc32(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.RecordBatch)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t RecordBatch::ByteSizeLong(const MessageLite& base) {
  const RecordBatch& this_ = static_cast<const RecordBatch&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t RecordBatch::ByteSizeLong() const {
  const RecordBatch& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.RecordBatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // bytes payload = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_payload().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this_._internal_payload());
      }
    }
    // int64 base_offset = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_base_offset() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_base_offset());
      }
    }
    // uint32 crc32 = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_crc32() != 0) {
        total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this_._internal_crc32());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void RecordBatch::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RecordBatch*>(&to_msg);
  auto& from = static_cast<const RecordBatch&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.RecordBatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_payload().empty()) {
        _this->_internal_set_payload(from._internal_payload());
      } else {
        if (_this->_impl_.payload_.IsDefault()) {
          _this->_internal_set_payload("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_base_offset() != 0) {
        _this->_impl_.base_offset_ = from._impl_.base_offset_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_crc32() != 0) {
        _this->_impl_.crc32_ = from._impl_.crc32_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RecordBatch::CopyFrom(const RecordBatch& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.RecordBatch)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void RecordBatch::InternalSwap(RecordBatch* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.crc32_) +
                                        sizeof(RecordBatch::_impl_.crc32_) -
                                        PROTOBUF_FIELD_OFFSET(RecordBatch, _impl_.base_offset_)>(
      reinterpret_cast<char*>(&_impl_.base_offset_), reinterpret_cast<char*>(&other->_impl_.base_offset_));
}

::google::protobuf::Metadata RecordBatch::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProduceRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<ProduceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_._has_bits_);
};

ProduceRequest::ProduceRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProduceRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.ProduceRequest)
}
PROTOBUF_NDEBUG_INLINE ProduceRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::ProduceRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, records_{visibility, arena, from.records_},
      topic_(arena, from.topic_), producer_id_(arena, from.producer_id_) {
}

ProduceRequest::ProduceRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ProduceRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProduceRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  ProduceRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partition_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, partition_),
           offsetof(Impl_, sequence_) - offsetof(Impl_, partition_) + sizeof(Impl_::sequence_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.ProduceRequest)
}
PROTOBUF_NDEBUG_INLINE ProduceRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, records_{visibility, arena}, topic_(arena), producer_id_(arena) {
}

inline void ProduceRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partition_), 0,
           offsetof(Impl_, sequence_) - offsetof(Impl_, partition_) + sizeof(Impl_::sequence_));
}
ProduceRequest::~ProduceRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.ProduceRequest)
  SharedDtor(*this);
}
inline void ProduceRequest::SharedDtor(MessageLite& self) {
  ProduceRequest& this_ = static_cast<ProduceRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.producer_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ProduceRequest::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                            ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ProduceRequest(arena);
}
constexpr auto ProduceRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.records_) +
          decltype(ProduceRequest::_impl_.records_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ProduceRequest), alignof(ProduceRequest),
                                                                  *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ProduceRequest::PlacementNew_, sizeof(ProduceRequest),
                                                        alignof(ProduceRequest));
  }
}
constexpr auto ProduceRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ProduceRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &ProduceRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ProduceRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ProduceRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ProduceRequest>(),
          &ProduceRequest::ByteSizeLong,
          &ProduceRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_._cached_size_),
          false,
      },
      &ProduceRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    ProduceRequest_class_data_ = ProduceRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ProduceRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ProduceRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ProduceRequest_class_data_.tc_table);
  return ProduceRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 6, 1, 51, 2>
    ProduceRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_._has_bits_),
            0, // no _extensions_
            6,
            56, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967232, // skipmap
            offsetof(decltype(_table_), field_entries),
            6, // num_field_entries
            1, // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            ProduceRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::ProduceRequest>(), // to_prefetch
#endif                                                                    // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.topic_)}},
            // int32 partition = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProduceRequest, _impl_.partition_), 2>(),
             {16, 2, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.partition_)}},
            // repeated .streamit.v1.Record records = 3;
            {::_pbi::TcParser::FastMtR1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.records_)}},
            // .streamit.v1.Ack ack = 4;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProduceRequest, _impl_.ack_), 3>(),
             {32, 3, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.ack_)}},
            // string producer_id = 5;
            {::_pbi::TcParser::FastUS1, {42, 1, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.producer_id_)}},
            // int64 sequence = 6;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProduceRequest, _impl_.sequence_), 4>(),
             {48, 4, 0, PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.sequence_)}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partition = 2;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.partition_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // repeated .streamit.v1.Record records = 3;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.records_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // .streamit.v1.Ack ack = 4;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.ack_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string producer_id = 5;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.producer_id_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int64 sequence = 6;
            {PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.sequence_), _Internal::kHasBitsOffset + 4, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::streamit::v1::Record>()},
        }},
        {{"\32\5\0\0\0\13\0\0"
          "streamit.v1.ProduceRequest"
          "topic"
          "producer_id"}},
    };
PROTOBUF_NOINLINE void ProduceRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.ProduceRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.producer_id_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cU) != 0) {
    ::memset(&_impl_.partition_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sequence_) -
                                   reinterpret_cast<char*>(&_impl_.partition_)) +
                 sizeof(_impl_.sequence_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
ProduceRequest::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                   ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ProduceRequest& this_ = static_cast<const ProduceRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ProduceRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ProduceRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.ProduceRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.ProduceRequest.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 partition = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_partition() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_partition(), target);
    }
  }

  // repeated .streamit.v1.Record records = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_records_size()); i < n; i++) {
    const auto& repfield = this_._internal_records().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(3, repfield, repfield.GetCachedSize(),
                                                                                target, stream);
  }

  // .streamit.v1.Ack ack = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_ack() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(4, this_._internal_ack(), target);
    }
  }

  // string producer_id = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_producer_id().empty()) {
      const ::std::string& _s = this_._internal_producer_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.ProduceRequest.producer_id");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  // int64 sequence = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_sequence() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<6>(
          stream, this_._internal_sequence(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.ProduceRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ProduceRequest::ByteSizeLong(const MessageLite& base) {
  const ProduceRequest& this_ = static_cast<const ProduceRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t ProduceRequest::ByteSizeLong() const {
  const ProduceRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.ProduceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated .streamit.v1.Record records = 3;
    {
      total_size += 1UL * this_._internal_records_size();
      for (const auto& msg : this_._internal_records()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string topic = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // string producer_id = 5;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_producer_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_producer_id());
      }
    }
    // int32 partition = 2;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_partition() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partition());
      }
    }
    // .streamit.v1.Ack ack = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_ack() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_ack());
      }
    }
    // int64 sequence = 6;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_sequence() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_sequence());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void ProduceRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                               const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProduceRequest*>(&to_msg);
  auto& from = static_cast<const ProduceRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.ProduceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_records()->MergeFrom(from._internal_records());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_producer_id().empty()) {
        _this->_internal_set_producer_id(from._internal_producer_id());
      } else {
        if (_this->_impl_.producer_id_.IsDefault()) {
          _this->_internal_set_producer_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_partition() != 0) {
        _this->_impl_.partition_ = from._impl_.partition_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_ack() != 0) {
        _this->_impl_.ack_ = from._impl_.ack_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_sequence() != 0) {
        _this->_impl_.sequence_ = from._impl_.sequence_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProduceRequest::CopyFrom(const ProduceRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.ProduceRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ProduceRequest::InternalSwap(ProduceRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_id_, &other->_impl_.producer_id_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.sequence_) +
                                        sizeof(ProduceRequest::_impl_.sequence_) -
                                        PROTOBUF_FIELD_OFFSET(ProduceRequest, _impl_.partition_)>(
      reinterpret_cast<char*>(&_impl_.partition_), reinterpret_cast<char*>(&other->_impl_.partition_));
}

::google::protobuf::Metadata ProduceRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ProduceResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<ProduceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_._has_bits_);
};

ProduceResponse::ProduceResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProduceResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.ProduceResponse)
}
PROTOBUF_NDEBUG_INLINE ProduceResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::ProduceResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, error_message_(arena, from.error_message_),
      leader_hint_(arena, from.leader_hint_) {
}

ProduceResponse::ProduceResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const ProduceResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, ProduceResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  ProduceResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, base_offset_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, base_offset_),
           offsetof(Impl_, retry_after_ms_) - offsetof(Impl_, base_offset_) + sizeof(Impl_::retry_after_ms_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.ProduceResponse)
}
PROTOBUF_NDEBUG_INLINE ProduceResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, error_message_(arena), leader_hint_(arena) {
}

inline void ProduceResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, base_offset_), 0,
           offsetof(Impl_, retry_after_ms_) - offsetof(Impl_, base_offset_) + sizeof(Impl_::retry_after_ms_));
}
ProduceResponse::~ProduceResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.ProduceResponse)
  SharedDtor(*this);
}
inline void ProduceResponse::SharedDtor(MessageLite& self) {
  ProduceResponse& this_ = static_cast<ProduceResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.leader_hint_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL ProduceResponse::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                             ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) ProduceResponse(arena);
}
constexpr auto ProduceResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ProduceResponse), alignof(ProduceResponse));
}
constexpr auto ProduceResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_ProduceResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &ProduceResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<ProduceResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &ProduceResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<ProduceResponse>(),
          &ProduceResponse::ByteSizeLong,
          &ProduceResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_._cached_size_),
          false,
      },
      &ProduceResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    ProduceResponse_class_data_ = ProduceResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
ProduceResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&ProduceResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(ProduceResponse_class_data_.tc_table);
  return ProduceResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 5, 0, 60, 2>
    ProduceResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_._has_bits_),
            0, // no _extensions_
            5,
            56, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967264, // skipmap
            offsetof(decltype(_table_), field_entries),
            5,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            ProduceResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::ProduceResponse>(), // to_prefetch
#endif                                                                     // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // int64 base_offset = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(ProduceResponse, _impl_.base_offset_), 2>(),
             {8, 2, 0, PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.base_offset_)}},
            // .streamit.v1.ErrorCode error_code = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProduceResponse, _impl_.error_code_), 3>(),
             {16, 3, 0, PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.error_code_)}},
            // string error_message = 3;
            {::_pbi::TcParser::FastUS1, {26, 0, 0, PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.error_message_)}},
            // int32 retry_after_ms = 4;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ProduceResponse, _impl_.retry_after_ms_), 4>(),
             {32, 4, 0, PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.retry_after_ms_)}},
            // string leader_hint = 5;
            {::_pbi::TcParser::FastUS1, {42, 1, 0, PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.leader_hint_)}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // int64 base_offset = 1;
            {PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.base_offset_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // .streamit.v1.ErrorCode error_code = 2;
            {PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 3;
            {PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 retry_after_ms = 4;
            {PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.retry_after_ms_), _Internal::kHasBitsOffset + 4, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // string leader_hint = 5;
            {PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.leader_hint_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        // no aux_entries
        {{"\33\0\0\15\0\13\0\0"
          "streamit.v1.ProduceResponse"
          "error_message"
          "leader_hint"}},
    };
PROTOBUF_NOINLINE void ProduceResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.ProduceResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.leader_hint_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cU) != 0) {
    ::memset(&_impl_.base_offset_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.retry_after_ms_) -
                                   reinterpret_cast<char*>(&_impl_.base_offset_)) +
                 sizeof(_impl_.retry_after_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
ProduceResponse::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const ProduceResponse& this_ = static_cast<const ProduceResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL ProduceResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const ProduceResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.ProduceResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 base_offset = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_base_offset() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
          stream, this_._internal_base_offset(), target);
    }
  }

  // .streamit.v1.ErrorCode error_code = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(2, this_._internal_error_code(), target);
    }
  }

  // string error_message = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.ProduceResponse.error_message");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // int32 retry_after_ms = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_retry_after_ms() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
          stream, this_._internal_retry_after_ms(), target);
    }
  }

  // string leader_hint = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_leader_hint().empty()) {
      const ::std::string& _s = this_._internal_leader_hint();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.ProduceResponse.leader_hint");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.ProduceResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t ProduceResponse::ByteSizeLong(const MessageLite& base) {
  const ProduceResponse& this_ = static_cast<const ProduceResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t ProduceResponse::ByteSizeLong() const {
  const ProduceResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.ProduceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string error_message = 3;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // string leader_hint = 5;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_leader_hint().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_leader_hint());
      }
    }
    // int64 base_offset = 1;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_base_offset() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_base_offset());
      }
    }
    // .streamit.v1.ErrorCode error_code = 2;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
    // int32 retry_after_ms = 4;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_retry_after_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_retry_after_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void ProduceResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ProduceResponse*>(&to_msg);
  auto& from = static_cast<const ProduceResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.ProduceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_leader_hint().empty()) {
        _this->_internal_set_leader_hint(from._internal_leader_hint());
      } else {
        if (_this->_impl_.leader_hint_.IsDefault()) {
          _this->_internal_set_leader_hint("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_base_offset() != 0) {
        _this->_impl_.base_offset_ = from._impl_.base_offset_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_retry_after_ms() != 0) {
        _this->_impl_.retry_after_ms_ = from._impl_.retry_after_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ProduceResponse::CopyFrom(const ProduceResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.ProduceResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void ProduceResponse::InternalSwap(ProduceResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.leader_hint_, &other->_impl_.leader_hint_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.retry_after_ms_) +
                                        sizeof(ProduceResponse::_impl_.retry_after_ms_) -
                                        PROTOBUF_FIELD_OFFSET(ProduceResponse, _impl_.base_offset_)>(
      reinterpret_cast<char*>(&_impl_.base_offset_), reinterpret_cast<char*>(&other->_impl_.base_offset_));
}

::google::protobuf::Metadata ProduceResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FetchRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<FetchRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_._has_bits_);
};

FetchRequest::FetchRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FetchRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.FetchRequest)
}
PROTOBUF_NDEBUG_INLINE FetchRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::FetchRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, topic_(arena, from.topic_) {
}

FetchRequest::FetchRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FetchRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FetchRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  FetchRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, offset_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, offset_),
           offsetof(Impl_, max_bytes_) - offsetof(Impl_, offset_) + sizeof(Impl_::max_bytes_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.FetchRequest)
}
PROTOBUF_NDEBUG_INLINE FetchRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, topic_(arena) {
}

inline void FetchRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, offset_), 0,
           offsetof(Impl_, max_bytes_) - offsetof(Impl_, offset_) + sizeof(Impl_::max_bytes_));
}
FetchRequest::~FetchRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.FetchRequest)
  SharedDtor(*this);
}
inline void FetchRequest::SharedDtor(MessageLite& self) {
  FetchRequest& this_ = static_cast<FetchRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FetchRequest::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                          ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FetchRequest(arena);
}
constexpr auto FetchRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FetchRequest), alignof(FetchRequest));
}
constexpr auto FetchRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FetchRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &FetchRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FetchRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FetchRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FetchRequest>(),
          &FetchRequest::ByteSizeLong,
          &FetchRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_._cached_size_),
          false,
      },
      &FetchRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    FetchRequest_class_data_ = FetchRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FetchRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FetchRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FetchRequest_class_data_.tc_table);
  return FetchRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 0, 38, 2> FetchRequest::_table_ =
    {
        {
            PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_._has_bits_),
            0, // no _extensions_
            4,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280, // skipmap
            offsetof(decltype(_table_), field_entries),
            4,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            FetchRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::FetchRequest>(), // to_prefetch
#endif                                                                  // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // int32 max_bytes = 4;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FetchRequest, _impl_.max_bytes_), 3>(),
             {32, 3, 0, PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.max_bytes_)}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.topic_)}},
            // int32 partition = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FetchRequest, _impl_.partition_), 2>(),
             {16, 2, 0, PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.partition_)}},
            // int64 offset = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FetchRequest, _impl_.offset_), 1>(),
             {24, 1, 0, PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.offset_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partition = 2;
            {PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.partition_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // int64 offset = 3;
            {PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.offset_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // int32 max_bytes = 4;
            {PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.max_bytes_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
        }},
        // no aux_entries
        {{"\30\5\0\0\0\0\0\0"
          "streamit.v1.FetchRequest"
          "topic"}},
    };
PROTOBUF_NOINLINE void FetchRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.FetchRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eU) != 0) {
    ::memset(
        &_impl_.offset_, 0,
        static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.max_bytes_) - reinterpret_cast<char*>(&_impl_.offset_)) +
            sizeof(_impl_.max_bytes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
FetchRequest::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                 ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FetchRequest& this_ = static_cast<const FetchRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FetchRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FetchRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.FetchRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FetchRequest.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 partition = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_partition() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_partition(), target);
    }
  }

  // int64 offset = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_offset() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
          stream, this_._internal_offset(), target);
    }
  }

  // int32 max_bytes = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_max_bytes() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
          stream, this_._internal_max_bytes(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.FetchRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FetchRequest::ByteSizeLong(const MessageLite& base) {
  const FetchRequest& this_ = static_cast<const FetchRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t FetchRequest::ByteSizeLong() const {
  const FetchRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.FetchRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    // string topic = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // int64 offset = 3;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_offset() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_offset());
      }
    }
    // int32 partition = 2;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_partition() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partition());
      }
    }
    // int32 max_bytes = 4;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_max_bytes() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_max_bytes());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void FetchRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FetchRequest*>(&to_msg);
  auto& from = static_cast<const FetchRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.FetchRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_offset() != 0) {
        _this->_impl_.offset_ = from._impl_.offset_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_partition() != 0) {
        _this->_impl_.partition_ = from._impl_.partition_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_max_bytes() != 0) {
        _this->_impl_.max_bytes_ = from._impl_.max_bytes_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchRequest::CopyFrom(const FetchRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.FetchRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FetchRequest::InternalSwap(FetchRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.max_bytes_) +
                                        sizeof(FetchRequest::_impl_.max_bytes_) -
                                        PROTOBUF_FIELD_OFFSET(FetchRequest, _impl_.offset_)>(
      reinterpret_cast<char*>(&_impl_.offset_), reinterpret_cast<char*>(&other->_impl_.offset_));
}

::google::protobuf::Metadata FetchRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FetchResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<FetchResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_._has_bits_);
};

FetchResponse::FetchResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FetchResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.FetchResponse)
}
PROTOBUF_NDEBUG_INLINE FetchResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::FetchResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, batches_{visibility, arena, from.batches_},
      error_message_(arena, from.error_message_), leader_hint_(arena, from.leader_hint_) {
}

FetchResponse::FetchResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FetchResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FetchResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  FetchResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, high_watermark_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, high_watermark_),
           offsetof(Impl_, retry_after_ms_) - offsetof(Impl_, high_watermark_) + sizeof(Impl_::retry_after_ms_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.FetchResponse)
}
PROTOBUF_NDEBUG_INLINE FetchResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, batches_{visibility, arena}, error_message_(arena), leader_hint_(arena) {
}

inline void FetchResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, high_watermark_), 0,
           offsetof(Impl_, retry_after_ms_) - offsetof(Impl_, high_watermark_) + sizeof(Impl_::retry_after_ms_));
}
FetchResponse::~FetchResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.FetchResponse)
  SharedDtor(*this);
}
inline void FetchResponse::SharedDtor(MessageLite& self) {
  FetchResponse& this_ = static_cast<FetchResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.leader_hint_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FetchResponse::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                           ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FetchResponse(arena);
}
constexpr auto FetchResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.batches_) +
          decltype(FetchResponse::_impl_.batches_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FetchResponse), alignof(FetchResponse),
                                                                  *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FetchResponse::PlacementNew_, sizeof(FetchResponse),
                                                        alignof(FetchResponse));
  }
}
constexpr auto FetchResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FetchResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &FetchResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FetchResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FetchResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FetchResponse>(),
          &FetchResponse::ByteSizeLong,
          &FetchResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_._cached_size_),
          false,
      },
      &FetchResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    FetchResponse_class_data_ = FetchResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FetchResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FetchResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FetchResponse_class_data_.tc_table);
  return FetchResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 6, 1, 58, 2> FetchResponse::_table_ =
    {
        {
            PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_._has_bits_),
            0, // no _extensions_
            6,
            56, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967232, // skipmap
            offsetof(decltype(_table_), field_entries),
            6, // num_field_entries
            1, // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            FetchResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::FetchResponse>(), // to_prefetch
#endif                                                                   // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // int64 high_watermark = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(FetchResponse, _impl_.high_watermark_), 2>(),
             {8, 2, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.high_watermark_)}},
            // repeated .streamit.v1.RecordBatch batches = 2;
            {::_pbi::TcParser::FastMtR1, {18, 63, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.batches_)}},
            // .streamit.v1.ErrorCode error_code = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FetchResponse, _impl_.error_code_), 3>(),
             {24, 3, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.error_code_)}},
            // string error_message = 4;
            {::_pbi::TcParser::FastUS1, {34, 0, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.error_message_)}},
            // int32 retry_after_ms = 5;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FetchResponse, _impl_.retry_after_ms_), 4>(),
             {40, 4, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.retry_after_ms_)}},
            // string leader_hint = 6;
            {::_pbi::TcParser::FastUS1, {50, 1, 0, PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.leader_hint_)}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // int64 high_watermark = 1;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.high_watermark_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
            // repeated .streamit.v1.RecordBatch batches = 2;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.batches_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // .streamit.v1.ErrorCode error_code = 3;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 4;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 retry_after_ms = 5;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.retry_after_ms_), _Internal::kHasBitsOffset + 4, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // string leader_hint = 6;
            {PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.leader_hint_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::streamit::v1::RecordBatch>()},
        }},
        {{"\31\0\0\0\15\0\13\0"
          "streamit.v1.FetchResponse"
          "error_message"
          "leader_hint"}},
    };
PROTOBUF_NOINLINE void FetchResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.FetchResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.batches_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.leader_hint_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cU) != 0) {
    ::memset(&_impl_.high_watermark_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.retry_after_ms_) -
                                   reinterpret_cast<char*>(&_impl_.high_watermark_)) +
                 sizeof(_impl_.retry_after_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
FetchResponse::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                  ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FetchResponse& this_ = static_cast<const FetchResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FetchResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FetchResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.FetchResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 high_watermark = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_high_watermark() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<1>(
          stream, this_._internal_high_watermark(), target);
    }
  }

  // repeated .streamit.v1.RecordBatch batches = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_batches_size()); i < n; i++) {
    const auto& repfield = this_._internal_batches().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(2, repfield, repfield.GetCachedSize(),
                                                                                target, stream);
  }

  // .streamit.v1.ErrorCode error_code = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(3, this_._internal_error_code(), target);
    }
  }

  // string error_message = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FetchResponse.error_message");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // int32 retry_after_ms = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_retry_after_ms() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
          stream, this_._internal_retry_after_ms(), target);
    }
  }

  // string leader_hint = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_leader_hint().empty()) {
      const ::std::string& _s = this_._internal_leader_hint();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FetchResponse.leader_hint");
      target = stream->WriteStringMaybeAliased(6, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.FetchResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FetchResponse::ByteSizeLong(const MessageLite& base) {
  const FetchResponse& this_ = static_cast<const FetchResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t FetchResponse::ByteSizeLong() const {
  const FetchResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.FetchResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated .streamit.v1.RecordBatch batches = 2;
    {
      total_size += 1UL * this_._internal_batches_size();
      for (const auto& msg : this_._internal_batches()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string error_message = 4;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // string leader_hint = 6;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_leader_hint().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_leader_hint());
      }
    }
    // int64 high_watermark = 1;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_high_watermark() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_high_watermark());
      }
    }
    // .streamit.v1.ErrorCode error_code = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
    // int32 retry_after_ms = 5;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_retry_after_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_retry_after_ms());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void FetchResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                              const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FetchResponse*>(&to_msg);
  auto& from = static_cast<const FetchResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.FetchResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_batches()->MergeFrom(from._internal_batches());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_leader_hint().empty()) {
        _this->_internal_set_leader_hint(from._internal_leader_hint());
      } else {
        if (_this->_impl_.leader_hint_.IsDefault()) {
          _this->_internal_set_leader_hint("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_high_watermark() != 0) {
        _this->_impl_.high_watermark_ = from._impl_.high_watermark_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_retry_after_ms() != 0) {
        _this->_impl_.retry_after_ms_ = from._impl_.retry_after_ms_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FetchResponse::CopyFrom(const FetchResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.FetchResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FetchResponse::InternalSwap(FetchResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.batches_.InternalSwap(&other->_impl_.batches_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.leader_hint_, &other->_impl_.leader_hint_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.retry_after_ms_) +
                                        sizeof(FetchResponse::_impl_.retry_after_ms_) -
                                        PROTOBUF_FIELD_OFFSET(FetchResponse, _impl_.high_watermark_)>(
      reinterpret_cast<char*>(&_impl_.high_watermark_), reinterpret_cast<char*>(&other->_impl_.high_watermark_));
}

::google::protobuf::Metadata FetchResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CommitOffsetRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<CommitOffsetRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_._has_bits_);
};

CommitOffsetRequest::CommitOffsetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CommitOffsetRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.CommitOffsetRequest)
}
PROTOBUF_NDEBUG_INLINE CommitOffsetRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::CommitOffsetRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, group_(arena, from.group_), topic_(arena, from.topic_) {
}

CommitOffsetRequest::CommitOffsetRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                         const CommitOffsetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CommitOffsetRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  CommitOffsetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, offset_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, offset_),
           offsetof(Impl_, partition_) - offsetof(Impl_, offset_) + sizeof(Impl_::partition_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.CommitOffsetRequest)
}
PROTOBUF_NDEBUG_INLINE CommitOffsetRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, group_(arena), topic_(arena) {
}

inline void CommitOffsetRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, offset_), 0,
           offsetof(Impl_, partition_) - offsetof(Impl_, offset_) + sizeof(Impl_::partition_));
}
CommitOffsetRequest::~CommitOffsetRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.CommitOffsetRequest)
  SharedDtor(*this);
}
inline void CommitOffsetRequest::SharedDtor(MessageLite& self) {
  CommitOffsetRequest& this_ = static_cast<CommitOffsetRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.group_.Destroy();
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CommitOffsetRequest::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                 void* PROTOBUF_NONNULL mem,
                                                                 ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CommitOffsetRequest(arena);
}
constexpr auto CommitOffsetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CommitOffsetRequest),
                                                                alignof(CommitOffsetRequest));
}
constexpr auto CommitOffsetRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CommitOffsetRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &CommitOffsetRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CommitOffsetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CommitOffsetRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CommitOffsetRequest>(),
          &CommitOffsetRequest::ByteSizeLong,
          &CommitOffsetRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_._cached_size_),
          false,
      },
      &CommitOffsetRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    CommitOffsetRequest_class_data_ = CommitOffsetRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CommitOffsetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CommitOffsetRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CommitOffsetRequest_class_data_.tc_table);
  return CommitOffsetRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 0, 50, 2>
    CommitOffsetRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_._has_bits_),
            0, // no _extensions_
            4,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280, // skipmap
            offsetof(decltype(_table_), field_entries),
            4,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            CommitOffsetRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::CommitOffsetRequest>(), // to_prefetch
#endif                                                                         // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // int64 offset = 4;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CommitOffsetRequest, _impl_.offset_), 2>(),
             {32, 2, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.offset_)}},
            // string group = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.group_)}},
            // string topic = 2;
            {::_pbi::TcParser::FastUS1, {18, 1, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.topic_)}},
            // int32 partition = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommitOffsetRequest, _impl_.partition_), 3>(),
             {24, 3, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.partition_)}},
        }},
        {{65535, 65535}},
        {{
            // string group = 1;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.group_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // string topic = 2;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.topic_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partition = 3;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.partition_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // int64 offset = 4;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.offset_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
        }},
        // no aux_entries
        {{"\37\5\5\0\0\0\0\0"
          "streamit.v1.CommitOffsetRequest"
          "group"
          "topic"}},
    };
PROTOBUF_NOINLINE void CommitOffsetRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.CommitOffsetRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.topic_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000000cU) != 0) {
    ::memset(
        &_impl_.offset_, 0,
        static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.partition_) - reinterpret_cast<char*>(&_impl_.offset_)) +
            sizeof(_impl_.partition_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
CommitOffsetRequest::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                        ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CommitOffsetRequest& this_ = static_cast<const CommitOffsetRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CommitOffsetRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CommitOffsetRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.CommitOffsetRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string group = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_group().empty()) {
      const ::std::string& _s = this_._internal_group();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.CommitOffsetRequest.group");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string topic = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.CommitOffsetRequest.topic");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 partition = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_partition() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
          stream, this_._internal_partition(), target);
    }
  }

  // int64 offset = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_offset() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<4>(
          stream, this_._internal_offset(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.CommitOffsetRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CommitOffsetRequest::ByteSizeLong(const MessageLite& base) {
  const CommitOffsetRequest& this_ = static_cast<const CommitOffsetRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t CommitOffsetRequest::ByteSizeLong() const {
  const CommitOffsetRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.CommitOffsetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    // string group = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_group().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_group());
      }
    }
    // string topic = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // int64 offset = 4;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_offset() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this_._internal_offset());
      }
    }
    // int32 partition = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_partition() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partition());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void CommitOffsetRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                    const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CommitOffsetRequest*>(&to_msg);
  auto& from = static_cast<const CommitOffsetRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.CommitOffsetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_group().empty()) {
        _this->_internal_set_group(from._internal_group());
      } else {
        if (_this->_impl_.group_.IsDefault()) {
          _this->_internal_set_group("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_offset() != 0) {
        _this->_impl_.offset_ = from._impl_.offset_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_partition() != 0) {
        _this->_impl_.partition_ = from._impl_.partition_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommitOffsetRequest::CopyFrom(const CommitOffsetRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.CommitOffsetRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CommitOffsetRequest::InternalSwap(CommitOffsetRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_, &other->_impl_.group_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.partition_) +
                                        sizeof(CommitOffsetRequest::_impl_.partition_) -
                                        PROTOBUF_FIELD_OFFSET(CommitOffsetRequest, _impl_.offset_)>(
      reinterpret_cast<char*>(&_impl_.offset_), reinterpret_cast<char*>(&other->_impl_.offset_));
}

::google::protobuf::Metadata CommitOffsetRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CommitOffsetResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<CommitOffsetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_._has_bits_);
};

CommitOffsetResponse::CommitOffsetResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CommitOffsetResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.CommitOffsetResponse)
}
PROTOBUF_NDEBUG_INLINE CommitOffsetResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::CommitOffsetResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, error_message_(arena, from.error_message_) {
}

CommitOffsetResponse::CommitOffsetResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                           const CommitOffsetResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CommitOffsetResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  CommitOffsetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.error_code_ = from._impl_.error_code_;

  // @@protoc_insertion_point(copy_constructor:streamit.v1.CommitOffsetResponse)
}
PROTOBUF_NDEBUG_INLINE CommitOffsetResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, error_message_(arena) {
}

inline void CommitOffsetResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.error_code_ = {};
}
CommitOffsetResponse::~CommitOffsetResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.CommitOffsetResponse)
  SharedDtor(*this);
}
inline void CommitOffsetResponse::SharedDtor(MessageLite& self) {
  CommitOffsetResponse& this_ = static_cast<CommitOffsetResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CommitOffsetResponse::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                  void* PROTOBUF_NONNULL mem,
                                                                  ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CommitOffsetResponse(arena);
}
constexpr auto CommitOffsetResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CommitOffsetResponse),
                                                                alignof(CommitOffsetResponse));
}
constexpr auto CommitOffsetResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CommitOffsetResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &CommitOffsetResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CommitOffsetResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CommitOffsetResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CommitOffsetResponse>(),
          &CommitOffsetResponse::ByteSizeLong,
          &CommitOffsetResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_._cached_size_),
          false,
      },
      &CommitOffsetResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    CommitOffsetResponse_class_data_ = CommitOffsetResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CommitOffsetResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CommitOffsetResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CommitOffsetResponse_class_data_.tc_table);
  return CommitOffsetResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<1, 2, 0, 54, 2>
    CommitOffsetResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_._has_bits_),
            0, // no _extensions_
            2,
            8, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967292, // skipmap
            offsetof(decltype(_table_), field_entries),
            2,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            CommitOffsetResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::CommitOffsetResponse>(), // to_prefetch
#endif                                                                          // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // string error_message = 2;
            {::_pbi::TcParser::FastUS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_.error_message_)}},
            // .streamit.v1.ErrorCode error_code = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CommitOffsetResponse, _impl_.error_code_),
                                                    1>(),
             {8, 1, 0, PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_.error_code_)}},
        }},
        {{65535, 65535}},
        {{
            // .streamit.v1.ErrorCode error_code = 1;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 2;
            {PROTOBUF_FIELD_OFFSET(CommitOffsetResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        // no aux_entries
        {{"\40\0\15\0\0\0\0\0"
          "streamit.v1.CommitOffsetResponse"
          "error_message"}},
    };
PROTOBUF_NOINLINE void CommitOffsetResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.CommitOffsetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CommitOffsetResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CommitOffsetResponse& this_ = static_cast<const CommitOffsetResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CommitOffsetResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CommitOffsetResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.CommitOffsetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .streamit.v1.ErrorCode error_code = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(1, this_._internal_error_code(), target);
    }
  }

  // string error_message = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.CommitOffsetResponse.error_message");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.CommitOffsetResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CommitOffsetResponse::ByteSizeLong(const MessageLite& base) {
  const CommitOffsetResponse& this_ = static_cast<const CommitOffsetResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t CommitOffsetResponse::ByteSizeLong() const {
  const CommitOffsetResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.CommitOffsetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string error_message = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // .streamit.v1.ErrorCode error_code = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void CommitOffsetResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                     const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CommitOffsetResponse*>(&to_msg);
  auto& from = static_cast<const CommitOffsetResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.CommitOffsetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CommitOffsetResponse::CopyFrom(const CommitOffsetResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.CommitOffsetResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CommitOffsetResponse::InternalSwap(CommitOffsetResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::google::protobuf::Metadata CommitOffsetResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PollAssignmentRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<PollAssignmentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_._has_bits_);
};

PollAssignmentRequest::PollAssignmentRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.PollAssignmentRequest)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::PollAssignmentRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, topics_{visibility, arena, from.topics_},
      group_(arena, from.group_), member_id_(arena, from.member_id_) {
}

PollAssignmentRequest::PollAssignmentRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                             const PollAssignmentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  PollAssignmentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:streamit.v1.PollAssignmentRequest)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, topics_{visibility, arena}, group_(arena), member_id_(arena) {
}

inline void PollAssignmentRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PollAssignmentRequest::~PollAssignmentRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.PollAssignmentRequest)
  SharedDtor(*this);
}
inline void PollAssignmentRequest::SharedDtor(MessageLite& self) {
  PollAssignmentRequest& this_ = static_cast<PollAssignmentRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.group_.Destroy();
  this_._impl_.member_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PollAssignmentRequest::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                   void* PROTOBUF_NONNULL mem,
                                                                   ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PollAssignmentRequest(arena);
}
constexpr auto PollAssignmentRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.topics_) +
          decltype(PollAssignmentRequest::_impl_.topics_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PollAssignmentRequest),
                                                                  alignof(PollAssignmentRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PollAssignmentRequest::PlacementNew_,
                                                        sizeof(PollAssignmentRequest), alignof(PollAssignmentRequest));
  }
}
constexpr auto PollAssignmentRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PollAssignmentRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &PollAssignmentRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PollAssignmentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PollAssignmentRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PollAssignmentRequest>(),
          &PollAssignmentRequest::ByteSizeLong,
          &PollAssignmentRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_._cached_size_),
          false,
      },
      &PollAssignmentRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    PollAssignmentRequest_class_data_ = PollAssignmentRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PollAssignmentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PollAssignmentRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PollAssignmentRequest_class_data_.tc_table);
  return PollAssignmentRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 0, 62, 2>
    PollAssignmentRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_._has_bits_),
            0, // no _extensions_
            3,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967288, // skipmap
            offsetof(decltype(_table_), field_entries),
            3,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            PollAssignmentRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::PollAssignmentRequest>(), // to_prefetch
#endif                                                                           // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // string group = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.group_)}},
            // string member_id = 2;
            {::_pbi::TcParser::FastUS1, {18, 1, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.member_id_)}},
            // repeated string topics = 3;
            {::_pbi::TcParser::FastUR1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.topics_)}},
        }},
        {{65535, 65535}},
        {{
            // string group = 1;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.group_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // string member_id = 2;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.member_id_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // repeated string topics = 3;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentRequest, _impl_.topics_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
        }},
        // no aux_entries
        {{"\41\5\11\6\0\0\0\0"
          "streamit.v1.PollAssignmentRequest"
          "group"
          "member_id"
          "topics"}},
    };
PROTOBUF_NOINLINE void PollAssignmentRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.PollAssignmentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.topics_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.group_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.member_id_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PollAssignmentRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PollAssignmentRequest& this_ = static_cast<const PollAssignmentRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PollAssignmentRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PollAssignmentRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.PollAssignmentRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string group = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_group().empty()) {
      const ::std::string& _s = this_._internal_group();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.PollAssignmentRequest.group");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string member_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_member_id().empty()) {
      const ::std::string& _s = this_._internal_member_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.PollAssignmentRequest.member_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // repeated string topics = 3;
  for (int i = 0, n = this_._internal_topics_size(); i < n; ++i) {
    const auto& s = this_._internal_topics().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
        "streamit.v1.PollAssignmentRequest.topics");
    target = stream->WriteString(3, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.PollAssignmentRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PollAssignmentRequest::ByteSizeLong(const MessageLite& base) {
  const PollAssignmentRequest& this_ = static_cast<const PollAssignmentRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t PollAssignmentRequest::ByteSizeLong() const {
  const PollAssignmentRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.PollAssignmentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated string topics = 3;
    {
      total_size += 1 * ::google::protobuf::internal::FromIntSize(this_._internal_topics().size());
      for (int i = 0, n = this_._internal_topics().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topics().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string group = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_group().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_group());
      }
    }
    // string member_id = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_member_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_member_id());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void PollAssignmentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                      const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PollAssignmentRequest*>(&to_msg);
  auto& from = static_cast<const PollAssignmentRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.PollAssignmentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_topics()->MergeFrom(from._internal_topics());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_group().empty()) {
        _this->_internal_set_group(from._internal_group());
      } else {
        if (_this->_impl_.group_.IsDefault()) {
          _this->_internal_set_group("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_member_id().empty()) {
        _this->_internal_set_member_id(from._internal_member_id());
      } else {
        if (_this->_impl_.member_id_.IsDefault()) {
          _this->_internal_set_member_id("");
        }
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PollAssignmentRequest::CopyFrom(const PollAssignmentRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.PollAssignmentRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PollAssignmentRequest::InternalSwap(PollAssignmentRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.topics_.InternalSwap(&other->_impl_.topics_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_, &other->_impl_.group_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.member_id_, &other->_impl_.member_id_, arena);
}

::google::protobuf::Metadata PollAssignmentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PollAssignmentResponse_Assignment::_Internal {
public:
  using HasBits = decltype(::std::declval<PollAssignmentResponse_Assignment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_._has_bits_);
};

PollAssignmentResponse_Assignment::PollAssignmentResponse_Assignment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentResponse_Assignment_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.PollAssignmentResponse.Assignment)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentResponse_Assignment::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::PollAssignmentResponse_Assignment& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, partitions_{visibility, arena, from.partitions_},
      _partitions_cached_byte_size_{0}, topic_(arena, from.topic_) {
}

PollAssignmentResponse_Assignment::PollAssignmentResponse_Assignment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                                                     const PollAssignmentResponse_Assignment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentResponse_Assignment_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  PollAssignmentResponse_Assignment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:streamit.v1.PollAssignmentResponse.Assignment)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentResponse_Assignment::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, partitions_{visibility, arena}, _partitions_cached_byte_size_{0}, topic_(arena) {
}

inline void PollAssignmentResponse_Assignment::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PollAssignmentResponse_Assignment::~PollAssignmentResponse_Assignment() {
  // @@protoc_insertion_point(destructor:streamit.v1.PollAssignmentResponse.Assignment)
  SharedDtor(*this);
}
inline void PollAssignmentResponse_Assignment::SharedDtor(MessageLite& self) {
  PollAssignmentResponse_Assignment& this_ = static_cast<PollAssignmentResponse_Assignment&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PollAssignmentResponse_Assignment::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem, ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PollAssignmentResponse_Assignment(arena);
}
constexpr auto PollAssignmentResponse_Assignment::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_.partitions_) +
          decltype(PollAssignmentResponse_Assignment::_impl_.partitions_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(PollAssignmentResponse_Assignment), alignof(PollAssignmentResponse_Assignment), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PollAssignmentResponse_Assignment::PlacementNew_,
                                                        sizeof(PollAssignmentResponse_Assignment),
                                                        alignof(PollAssignmentResponse_Assignment));
  }
}
constexpr auto PollAssignmentResponse_Assignment::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PollAssignmentResponse_Assignment_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &PollAssignmentResponse_Assignment::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PollAssignmentResponse_Assignment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PollAssignmentResponse_Assignment::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PollAssignmentResponse_Assignment>(),
          &PollAssignmentResponse_Assignment::ByteSizeLong,
          &PollAssignmentResponse_Assignment::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_._cached_size_),
          false,
      },
      &PollAssignmentResponse_Assignment::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    PollAssignmentResponse_Assignment_class_data_ = PollAssignmentResponse_Assignment::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PollAssignmentResponse_Assignment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PollAssignmentResponse_Assignment_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PollAssignmentResponse_Assignment_class_data_.tc_table);
  return PollAssignmentResponse_Assignment_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<1, 2, 0, 59, 2>
    PollAssignmentResponse_Assignment::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_._has_bits_),
            0, // no _extensions_
            2,
            8, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967292, // skipmap
            offsetof(decltype(_table_), field_entries),
            2,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            PollAssignmentResponse_Assignment_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::PollAssignmentResponse_Assignment>(), // to_prefetch
#endif // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // repeated int32 partitions = 2;
            {::_pbi::TcParser::FastV32P1,
             {18, 63, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_.partitions_)}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1,
             {10, 0, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_.topic_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // repeated int32 partitions = 2;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse_Assignment, _impl_.partitions_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
        }},
        // no aux_entries
        {{"\55\5\0\0\0\0\0\0"
          "streamit.v1.PollAssignmentResponse.Assignment"
          "topic"}},
    };
PROTOBUF_NOINLINE void PollAssignmentResponse_Assignment::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.PollAssignmentResponse.Assignment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.partitions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PollAssignmentResponse_Assignment::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PollAssignmentResponse_Assignment& this_ = static_cast<const PollAssignmentResponse_Assignment&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PollAssignmentResponse_Assignment::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PollAssignmentResponse_Assignment& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.PollAssignmentResponse.Assignment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.PollAssignmentResponse.Assignment.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // repeated int32 partitions = 2;
  {
    int byte_size = this_._impl_._partitions_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(2, this_._internal_partitions(), byte_size, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.PollAssignmentResponse.Assignment)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PollAssignmentResponse_Assignment::ByteSizeLong(const MessageLite& base) {
  const PollAssignmentResponse_Assignment& this_ = static_cast<const PollAssignmentResponse_Assignment&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t PollAssignmentResponse_Assignment::ByteSizeLong() const {
  const PollAssignmentResponse_Assignment& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.PollAssignmentResponse.Assignment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated int32 partitions = 2;
    {
      total_size += ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(this_._internal_partitions(), 1,
                                                                       this_._impl_._partitions_cached_byte_size_);
    }
  }
  {
    // string topic = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void PollAssignmentResponse_Assignment::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                                  const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PollAssignmentResponse_Assignment*>(&to_msg);
  auto& from = static_cast<const PollAssignmentResponse_Assignment&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.PollAssignmentResponse.Assignment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_partitions()->MergeFrom(from._internal_partitions());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!from._internal_topic().empty()) {
      _this->_internal_set_topic(from._internal_topic());
    } else {
      if (_this->_impl_.topic_.IsDefault()) {
        _this->_internal_set_topic("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PollAssignmentResponse_Assignment::CopyFrom(const PollAssignmentResponse_Assignment& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.PollAssignmentResponse.Assignment)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PollAssignmentResponse_Assignment::InternalSwap(
    PollAssignmentResponse_Assignment* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.partitions_.InternalSwap(&other->_impl_.partitions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
}

::google::protobuf::Metadata PollAssignmentResponse_Assignment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PollAssignmentResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<PollAssignmentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_._has_bits_);
};

PollAssignmentResponse::PollAssignmentResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.PollAssignmentResponse)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::PollAssignmentResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, assignments_{visibility, arena, from.assignments_},
      error_message_(arena, from.error_message_) {
}

PollAssignmentResponse::PollAssignmentResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                               const PollAssignmentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PollAssignmentResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  PollAssignmentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, heartbeat_interval_ms_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, heartbeat_interval_ms_),
           offsetof(Impl_, error_code_) - offsetof(Impl_, heartbeat_interval_ms_) + sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.PollAssignmentResponse)
}
PROTOBUF_NDEBUG_INLINE PollAssignmentResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, assignments_{visibility, arena}, error_message_(arena) {
}

inline void PollAssignmentResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, heartbeat_interval_ms_), 0,
           offsetof(Impl_, error_code_) - offsetof(Impl_, heartbeat_interval_ms_) + sizeof(Impl_::error_code_));
}
PollAssignmentResponse::~PollAssignmentResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.PollAssignmentResponse)
  SharedDtor(*this);
}
inline void PollAssignmentResponse::SharedDtor(MessageLite& self) {
  PollAssignmentResponse& this_ = static_cast<PollAssignmentResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PollAssignmentResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem, ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PollAssignmentResponse(arena);
}
constexpr auto PollAssignmentResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.assignments_) +
          decltype(PollAssignmentResponse::_impl_.assignments_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PollAssignmentResponse),
                                                                  alignof(PollAssignmentResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(
        &PollAssignmentResponse::PlacementNew_, sizeof(PollAssignmentResponse), alignof(PollAssignmentResponse));
  }
}
constexpr auto PollAssignmentResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PollAssignmentResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &PollAssignmentResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PollAssignmentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PollAssignmentResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PollAssignmentResponse>(),
          &PollAssignmentResponse::ByteSizeLong,
          &PollAssignmentResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_._cached_size_),
          false,
      },
      &PollAssignmentResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    PollAssignmentResponse_class_data_ = PollAssignmentResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PollAssignmentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PollAssignmentResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PollAssignmentResponse_class_data_.tc_table);
  return PollAssignmentResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 1, 56, 2>
    PollAssignmentResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_._has_bits_),
            0, // no _extensions_
            4,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280, // skipmap
            offsetof(decltype(_table_), field_entries),
            4, // num_field_entries
            1, // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            PollAssignmentResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::PollAssignmentResponse>(), // to_prefetch
#endif                                                                            // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // string error_message = 4;
            {::_pbi::TcParser::FastUS1,
             {34, 0, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.error_message_)}},
            // repeated .streamit.v1.PollAssignmentResponse.Assignment assignments = 1;
            {::_pbi::TcParser::FastMtR1,
             {10, 63, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.assignments_)}},
            // int32 heartbeat_interval_ms = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<
                 ::uint32_t, offsetof(PollAssignmentResponse, _impl_.heartbeat_interval_ms_), 1>(),
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.heartbeat_interval_ms_)}},
            // .streamit.v1.ErrorCode error_code = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PollAssignmentResponse, _impl_.error_code_),
                                                    2>(),
             {24, 2, 0, PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.error_code_)}},
        }},
        {{65535, 65535}},
        {{
            // repeated .streamit.v1.PollAssignmentResponse.Assignment assignments = 1;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.assignments_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
            // int32 heartbeat_interval_ms = 2;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.heartbeat_interval_ms_),
             _Internal::kHasBitsOffset + 1, 0, (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // .streamit.v1.ErrorCode error_code = 3;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 4;
            {PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::streamit::v1::PollAssignmentResponse_Assignment>()},
        }},
        {{"\42\0\0\0\15\0\0\0"
          "streamit.v1.PollAssignmentResponse"
          "error_message"}},
    };
PROTOBUF_NOINLINE void PollAssignmentResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.PollAssignmentResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.assignments_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006U) != 0) {
    ::memset(&_impl_.heartbeat_interval_ms_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
                                   reinterpret_cast<char*>(&_impl_.heartbeat_interval_ms_)) +
                 sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL PollAssignmentResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PollAssignmentResponse& this_ = static_cast<const PollAssignmentResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PollAssignmentResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PollAssignmentResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.PollAssignmentResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .streamit.v1.PollAssignmentResponse.Assignment assignments = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_assignments_size()); i < n; i++) {
    const auto& repfield = this_._internal_assignments().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(1, repfield, repfield.GetCachedSize(),
                                                                                target, stream);
  }

  // int32 heartbeat_interval_ms = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_heartbeat_interval_ms() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_heartbeat_interval_ms(), target);
    }
  }

  // .streamit.v1.ErrorCode error_code = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(3, this_._internal_error_code(), target);
    }
  }

  // string error_message = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.PollAssignmentResponse.error_message");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.PollAssignmentResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PollAssignmentResponse::ByteSizeLong(const MessageLite& base) {
  const PollAssignmentResponse& this_ = static_cast<const PollAssignmentResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t PollAssignmentResponse::ByteSizeLong() const {
  const PollAssignmentResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.PollAssignmentResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated .streamit.v1.PollAssignmentResponse.Assignment assignments = 1;
    {
      total_size += 1UL * this_._internal_assignments_size();
      for (const auto& msg : this_._internal_assignments()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string error_message = 4;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // int32 heartbeat_interval_ms = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_heartbeat_interval_ms() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_heartbeat_interval_ms());
      }
    }
    // .streamit.v1.ErrorCode error_code = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void PollAssignmentResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                       const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PollAssignmentResponse*>(&to_msg);
  auto& from = static_cast<const PollAssignmentResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.PollAssignmentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_assignments()->MergeFrom(from._internal_assignments());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_heartbeat_interval_ms() != 0) {
        _this->_impl_.heartbeat_interval_ms_ = from._impl_.heartbeat_interval_ms_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PollAssignmentResponse::CopyFrom(const PollAssignmentResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.PollAssignmentResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PollAssignmentResponse::InternalSwap(PollAssignmentResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.assignments_.InternalSwap(&other->_impl_.assignments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.error_code_) +
                                        sizeof(PollAssignmentResponse::_impl_.error_code_) -
                                        PROTOBUF_FIELD_OFFSET(PollAssignmentResponse, _impl_.heartbeat_interval_ms_)>(
      reinterpret_cast<char*>(&_impl_.heartbeat_interval_ms_),
      reinterpret_cast<char*>(&other->_impl_.heartbeat_interval_ms_));
}

::google::protobuf::Metadata PollAssignmentResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateTopicRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<CreateTopicRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_._has_bits_);
};

CreateTopicRequest::CreateTopicRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateTopicRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.CreateTopicRequest)
}
PROTOBUF_NDEBUG_INLINE CreateTopicRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::CreateTopicRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, topic_(arena, from.topic_) {
}

CreateTopicRequest::CreateTopicRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                       const CreateTopicRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateTopicRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  CreateTopicRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partitions_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, partitions_),
           offsetof(Impl_, replication_factor_) - offsetof(Impl_, partitions_) + sizeof(Impl_::replication_factor_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.CreateTopicRequest)
}
PROTOBUF_NDEBUG_INLINE CreateTopicRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, topic_(arena) {
}

inline void CreateTopicRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partitions_), 0,
           offsetof(Impl_, replication_factor_) - offsetof(Impl_, partitions_) + sizeof(Impl_::replication_factor_));
}
CreateTopicRequest::~CreateTopicRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.CreateTopicRequest)
  SharedDtor(*this);
}
inline void CreateTopicRequest::SharedDtor(MessageLite& self) {
  CreateTopicRequest& this_ = static_cast<CreateTopicRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CreateTopicRequest::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                void* PROTOBUF_NONNULL mem,
                                                                ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CreateTopicRequest(arena);
}
constexpr auto CreateTopicRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CreateTopicRequest),
                                                                alignof(CreateTopicRequest));
}
constexpr auto CreateTopicRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CreateTopicRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &CreateTopicRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CreateTopicRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CreateTopicRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CreateTopicRequest>(),
          &CreateTopicRequest::ByteSizeLong,
          &CreateTopicRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_._cached_size_),
          false,
      },
      &CreateTopicRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    CreateTopicRequest_class_data_ = CreateTopicRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CreateTopicRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CreateTopicRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CreateTopicRequest_class_data_.tc_table);
  return CreateTopicRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 0, 44, 2>
    CreateTopicRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_._has_bits_),
            0, // no _extensions_
            3,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967288, // skipmap
            offsetof(decltype(_table_), field_entries),
            3,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            CreateTopicRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::CreateTopicRequest>(), // to_prefetch
#endif                                                                        // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.topic_)}},
            // int32 partitions = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CreateTopicRequest, _impl_.partitions_), 1>(),
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.partitions_)}},
            // int32 replication_factor = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t,
                                                    offsetof(CreateTopicRequest, _impl_.replication_factor_), 2>(),
             {24, 2, 0, PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.replication_factor_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partitions = 2;
            {PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.partitions_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // int32 replication_factor = 3;
            {PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.replication_factor_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
        }},
        // no aux_entries
        {{"\36\5\0\0\0\0\0\0"
          "streamit.v1.CreateTopicRequest"
          "topic"}},
    };
PROTOBUF_NOINLINE void CreateTopicRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.CreateTopicRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006U) != 0) {
    ::memset(&_impl_.partitions_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.replication_factor_) -
                                   reinterpret_cast<char*>(&_impl_.partitions_)) +
                 sizeof(_impl_.replication_factor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
CreateTopicRequest::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                       ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CreateTopicRequest& this_ = static_cast<const CreateTopicRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CreateTopicRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CreateTopicRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.CreateTopicRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.CreateTopicRequest.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 partitions = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_partitions() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_partitions(), target);
    }
  }

  // int32 replication_factor = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_replication_factor() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
          stream, this_._internal_replication_factor(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.CreateTopicRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CreateTopicRequest::ByteSizeLong(const MessageLite& base) {
  const CreateTopicRequest& this_ = static_cast<const CreateTopicRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t CreateTopicRequest::ByteSizeLong() const {
  const CreateTopicRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.CreateTopicRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string topic = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // int32 partitions = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_partitions() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partitions());
      }
    }
    // int32 replication_factor = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_replication_factor() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_replication_factor());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void CreateTopicRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                   const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateTopicRequest*>(&to_msg);
  auto& from = static_cast<const CreateTopicRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.CreateTopicRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_partitions() != 0) {
        _this->_impl_.partitions_ = from._impl_.partitions_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_replication_factor() != 0) {
        _this->_impl_.replication_factor_ = from._impl_.replication_factor_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTopicRequest::CopyFrom(const CreateTopicRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.CreateTopicRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CreateTopicRequest::InternalSwap(CreateTopicRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.replication_factor_) +
                                        sizeof(CreateTopicRequest::_impl_.replication_factor_) -
                                        PROTOBUF_FIELD_OFFSET(CreateTopicRequest, _impl_.partitions_)>(
      reinterpret_cast<char*>(&_impl_.partitions_), reinterpret_cast<char*>(&other->_impl_.partitions_));
}

::google::protobuf::Metadata CreateTopicRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateTopicResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<CreateTopicResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_._has_bits_);
};

CreateTopicResponse::CreateTopicResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateTopicResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.CreateTopicResponse)
}
PROTOBUF_NDEBUG_INLINE CreateTopicResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::CreateTopicResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, error_message_(arena, from.error_message_) {
}

CreateTopicResponse::CreateTopicResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                         const CreateTopicResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CreateTopicResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  CreateTopicResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, success_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) - offsetof(Impl_, success_) + sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.CreateTopicResponse)
}
PROTOBUF_NDEBUG_INLINE CreateTopicResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, error_message_(arena) {
}

inline void CreateTopicResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, success_), 0,
           offsetof(Impl_, error_code_) - offsetof(Impl_, success_) + sizeof(Impl_::error_code_));
}
CreateTopicResponse::~CreateTopicResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.CreateTopicResponse)
  SharedDtor(*this);
}
inline void CreateTopicResponse::SharedDtor(MessageLite& self) {
  CreateTopicResponse& this_ = static_cast<CreateTopicResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CreateTopicResponse::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                 void* PROTOBUF_NONNULL mem,
                                                                 ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CreateTopicResponse(arena);
}
constexpr auto CreateTopicResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CreateTopicResponse),
                                                                alignof(CreateTopicResponse));
}
constexpr auto CreateTopicResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CreateTopicResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &CreateTopicResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CreateTopicResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CreateTopicResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CreateTopicResponse>(),
          &CreateTopicResponse::ByteSizeLong,
          &CreateTopicResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_._cached_size_),
          false,
      },
      &CreateTopicResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    CreateTopicResponse_class_data_ = CreateTopicResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
CreateTopicResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CreateTopicResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CreateTopicResponse_class_data_.tc_table);
  return CreateTopicResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 0, 53, 2>
    CreateTopicResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_._has_bits_),
            0, // no _extensions_
            3,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967288, // skipmap
            offsetof(decltype(_table_), field_entries),
            3,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            CreateTopicResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::CreateTopicResponse>(), // to_prefetch
#endif                                                                         // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // bool success = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CreateTopicResponse, _impl_.success_), 1>(),
             {8, 1, 0, PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.success_)}},
            // string error_message = 2;
            {::_pbi::TcParser::FastUS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.error_message_)}},
            // .streamit.v1.ErrorCode error_code = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CreateTopicResponse, _impl_.error_code_), 2>(),
             {24, 2, 0, PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.error_code_)}},
        }},
        {{65535, 65535}},
        {{
            // bool success = 1;
            {PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.success_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kBool)},
            // string error_message = 2;
            {PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // .streamit.v1.ErrorCode error_code = 3;
            {PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
        }},
        // no aux_entries
        {{"\37\0\15\0\0\0\0\0"
          "streamit.v1.CreateTopicResponse"
          "error_message"}},
    };
PROTOBUF_NOINLINE void CreateTopicResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.CreateTopicResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.error_message_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006U) != 0) {
    ::memset(&_impl_.success_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
                                   reinterpret_cast<char*>(&_impl_.success_)) +
                 sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
CreateTopicResponse::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                        ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CreateTopicResponse& this_ = static_cast<const CreateTopicResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CreateTopicResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CreateTopicResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.CreateTopicResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this_._internal_success(), target);
    }
  }

  // string error_message = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.CreateTopicResponse.error_message");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // .streamit.v1.ErrorCode error_code = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(3, this_._internal_error_code(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.CreateTopicResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CreateTopicResponse::ByteSizeLong(const MessageLite& base) {
  const CreateTopicResponse& this_ = static_cast<const CreateTopicResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t CreateTopicResponse::ByteSizeLong() const {
  const CreateTopicResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.CreateTopicResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string error_message = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // bool success = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
    // .streamit.v1.ErrorCode error_code = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void CreateTopicResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                    const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateTopicResponse*>(&to_msg);
  auto& from = static_cast<const CreateTopicResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.CreateTopicResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_success() != 0) {
        _this->_impl_.success_ = from._impl_.success_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTopicResponse::CopyFrom(const CreateTopicResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.CreateTopicResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void CreateTopicResponse::InternalSwap(CreateTopicResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.error_code_) +
                                        sizeof(CreateTopicResponse::_impl_.error_code_) -
                                        PROTOBUF_FIELD_OFFSET(CreateTopicResponse, _impl_.success_)>(
      reinterpret_cast<char*>(&_impl_.success_), reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata CreateTopicResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TopicMetadata::_Internal {
public:
  using HasBits = decltype(::std::declval<TopicMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_._has_bits_);
};

TopicMetadata::TopicMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TopicMetadata_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.TopicMetadata)
}
PROTOBUF_NDEBUG_INLINE TopicMetadata::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::TopicMetadata& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, partition_metadata_{visibility, arena, from.partition_metadata_},
      topic_(arena, from.topic_) {
}

TopicMetadata::TopicMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const TopicMetadata& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, TopicMetadata_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  TopicMetadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partitions_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, partitions_),
           offsetof(Impl_, replication_factor_) - offsetof(Impl_, partitions_) + sizeof(Impl_::replication_factor_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.TopicMetadata)
}
PROTOBUF_NDEBUG_INLINE TopicMetadata::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, partition_metadata_{visibility, arena}, topic_(arena) {
}

inline void TopicMetadata::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partitions_), 0,
           offsetof(Impl_, replication_factor_) - offsetof(Impl_, partitions_) + sizeof(Impl_::replication_factor_));
}
TopicMetadata::~TopicMetadata() {
  // @@protoc_insertion_point(destructor:streamit.v1.TopicMetadata)
  SharedDtor(*this);
}
inline void TopicMetadata::SharedDtor(MessageLite& self) {
  TopicMetadata& this_ = static_cast<TopicMetadata&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL TopicMetadata::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                           ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) TopicMetadata(arena);
}
constexpr auto TopicMetadata::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partition_metadata_) +
          decltype(TopicMetadata::_impl_.partition_metadata_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TopicMetadata), alignof(TopicMetadata),
                                                                  *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TopicMetadata::PlacementNew_, sizeof(TopicMetadata),
                                                        alignof(TopicMetadata));
  }
}
constexpr auto TopicMetadata::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_TopicMetadata_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &TopicMetadata::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<TopicMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &TopicMetadata::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<TopicMetadata>(),
          &TopicMetadata::ByteSizeLong,
          &TopicMetadata::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_._cached_size_),
          false,
      },
      &TopicMetadata::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    TopicMetadata_class_data_ = TopicMetadata::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
TopicMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&TopicMetadata_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(TopicMetadata_class_data_.tc_table);
  return TopicMetadata_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 1, 39, 2> TopicMetadata::_table_ =
    {
        {
            PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_._has_bits_),
            0, // no _extensions_
            4,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280, // skipmap
            offsetof(decltype(_table_), field_entries),
            4, // num_field_entries
            1, // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            TopicMetadata_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::TopicMetadata>(), // to_prefetch
#endif                                                                   // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // repeated .streamit.v1.PartitionMetadata partition_metadata = 4;
            {::_pbi::TcParser::FastMtR1, {34, 63, 0, PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partition_metadata_)}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.topic_)}},
            // int32 partitions = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TopicMetadata, _impl_.partitions_), 1>(),
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partitions_)}},
            // int32 replication_factor = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TopicMetadata, _impl_.replication_factor_),
                                                    2>(),
             {24, 2, 0, PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.replication_factor_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partitions = 2;
            {PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partitions_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // int32 replication_factor = 3;
            {PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.replication_factor_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // repeated .streamit.v1.PartitionMetadata partition_metadata = 4;
            {PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partition_metadata_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::streamit::v1::PartitionMetadata>()},
        }},
        {{"\31\5\0\0\0\0\0\0"
          "streamit.v1.TopicMetadata"
          "topic"}},
    };
PROTOBUF_NOINLINE void TopicMetadata::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.TopicMetadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.partition_metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006U) != 0) {
    ::memset(&_impl_.partitions_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.replication_factor_) -
                                   reinterpret_cast<char*>(&_impl_.partitions_)) +
                 sizeof(_impl_.replication_factor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
TopicMetadata::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                  ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const TopicMetadata& this_ = static_cast<const TopicMetadata&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL TopicMetadata::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const TopicMetadata& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.TopicMetadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.TopicMetadata.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 partitions = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_partitions() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_partitions(), target);
    }
  }

  // int32 replication_factor = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_replication_factor() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
          stream, this_._internal_replication_factor(), target);
    }
  }

  // repeated .streamit.v1.PartitionMetadata partition_metadata = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(this_._internal_partition_metadata_size()); i < n; i++) {
    const auto& repfield = this_._internal_partition_metadata().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(4, repfield, repfield.GetCachedSize(),
                                                                                target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.TopicMetadata)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t TopicMetadata::ByteSizeLong(const MessageLite& base) {
  const TopicMetadata& this_ = static_cast<const TopicMetadata&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t TopicMetadata::ByteSizeLong() const {
  const TopicMetadata& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.TopicMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated .streamit.v1.PartitionMetadata partition_metadata = 4;
    {
      total_size += 1UL * this_._internal_partition_metadata_size();
      for (const auto& msg : this_._internal_partition_metadata()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string topic = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // int32 partitions = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_partitions() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partitions());
      }
    }
    // int32 replication_factor = 3;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_replication_factor() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_replication_factor());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void TopicMetadata::MergeImpl(::google::protobuf::MessageLite& to_msg,
                              const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TopicMetadata*>(&to_msg);
  auto& from = static_cast<const TopicMetadata&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.TopicMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_partition_metadata()->MergeFrom(from._internal_partition_metadata());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_partitions() != 0) {
        _this->_impl_.partitions_ = from._impl_.partitions_;
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_replication_factor() != 0) {
        _this->_impl_.replication_factor_ = from._impl_.replication_factor_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TopicMetadata::CopyFrom(const TopicMetadata& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.TopicMetadata)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void TopicMetadata::InternalSwap(TopicMetadata* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.partition_metadata_.InternalSwap(&other->_impl_.partition_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.replication_factor_) +
                                        sizeof(TopicMetadata::_impl_.replication_factor_) -
                                        PROTOBUF_FIELD_OFFSET(TopicMetadata, _impl_.partitions_)>(
      reinterpret_cast<char*>(&_impl_.partitions_), reinterpret_cast<char*>(&other->_impl_.partitions_));
}

::google::protobuf::Metadata TopicMetadata::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PartitionMetadata::_Internal {
public:
  using HasBits = decltype(::std::declval<PartitionMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_._has_bits_);
};

PartitionMetadata::PartitionMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PartitionMetadata_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.PartitionMetadata)
}
PROTOBUF_NDEBUG_INLINE PartitionMetadata::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::PartitionMetadata& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, replicas_{visibility, arena, from.replicas_},
      _replicas_cached_byte_size_{0}, isr_{visibility, arena, from.isr_}, _isr_cached_byte_size_{0} {
}

PartitionMetadata::PartitionMetadata(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const PartitionMetadata& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, PartitionMetadata_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  PartitionMetadata* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partition_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, partition_),
           offsetof(Impl_, leader_) - offsetof(Impl_, partition_) + sizeof(Impl_::leader_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.PartitionMetadata)
}
PROTOBUF_NDEBUG_INLINE PartitionMetadata::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, replicas_{visibility, arena}, _replicas_cached_byte_size_{0}, isr_{visibility, arena},
      _isr_cached_byte_size_{0} {
}

inline void PartitionMetadata::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, partition_), 0,
           offsetof(Impl_, leader_) - offsetof(Impl_, partition_) + sizeof(Impl_::leader_));
}
PartitionMetadata::~PartitionMetadata() {
  // @@protoc_insertion_point(destructor:streamit.v1.PartitionMetadata)
  SharedDtor(*this);
}
inline void PartitionMetadata::SharedDtor(MessageLite& self) {
  PartitionMetadata& this_ = static_cast<PartitionMetadata&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL PartitionMetadata::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                               ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) PartitionMetadata(arena);
}
constexpr auto PartitionMetadata::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.replicas_) +
          decltype(PartitionMetadata::_impl_.replicas_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.isr_) +
          decltype(PartitionMetadata::_impl_.isr_)::InternalGetArenaOffset(
              ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PartitionMetadata), alignof(PartitionMetadata),
                                                                  *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PartitionMetadata::PlacementNew_, sizeof(PartitionMetadata),
                                                        alignof(PartitionMetadata));
  }
}
constexpr auto PartitionMetadata::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_PartitionMetadata_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &PartitionMetadata::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<PartitionMetadata>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &PartitionMetadata::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<PartitionMetadata>(),
          &PartitionMetadata::ByteSizeLong,
          &PartitionMetadata::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_._cached_size_),
          false,
      },
      &PartitionMetadata::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    PartitionMetadata_class_data_ = PartitionMetadata::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
PartitionMetadata::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&PartitionMetadata_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(PartitionMetadata_class_data_.tc_table);
  return PartitionMetadata_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
    PartitionMetadata::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_._has_bits_),
            0, // no _extensions_
            4,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967280, // skipmap
            offsetof(decltype(_table_), field_entries),
            4,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            PartitionMetadata_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::PartitionMetadata>(), // to_prefetch
#endif                                                                       // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // repeated int32 isr = 4;
            {::_pbi::TcParser::FastV32P1, {34, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.isr_)}},
            // int32 partition = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PartitionMetadata, _impl_.partition_), 0>(),
             {8, 0, 0, PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.partition_)}},
            // int32 leader = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PartitionMetadata, _impl_.leader_), 1>(),
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.leader_)}},
            // repeated int32 replicas = 3;
            {::_pbi::TcParser::FastV32P1, {26, 63, 0, PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.replicas_)}},
        }},
        {{65535, 65535}},
        {{
            // int32 partition = 1;
            {PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.partition_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // int32 leader = 2;
            {PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.leader_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // repeated int32 replicas = 3;
            {PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.replicas_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
            // repeated int32 isr = 4;
            {PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.isr_), -1, 0,
             (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
        }},
        // no aux_entries
        {{}},
    };
PROTOBUF_NOINLINE void PartitionMetadata::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.PartitionMetadata)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  _impl_.replicas_.Clear();
  _impl_.isr_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    ::memset(
        &_impl_.partition_, 0,
        static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.leader_) - reinterpret_cast<char*>(&_impl_.partition_)) +
            sizeof(_impl_.leader_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
PartitionMetadata::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const PartitionMetadata& this_ = static_cast<const PartitionMetadata&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL PartitionMetadata::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const PartitionMetadata& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.PartitionMetadata)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 partition = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (this_._internal_partition() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
          stream, this_._internal_partition(), target);
    }
  }

  // int32 leader = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_leader() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_leader(), target);
    }
  }

  // repeated int32 replicas = 3;
  {
    int byte_size = this_._impl_._replicas_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(3, this_._internal_replicas(), byte_size, target);
    }
  }

  // repeated int32 isr = 4;
  {
    int byte_size = this_._impl_._isr_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(4, this_._internal_isr(), byte_size, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.PartitionMetadata)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t PartitionMetadata::ByteSizeLong(const MessageLite& base) {
  const PartitionMetadata& this_ = static_cast<const PartitionMetadata&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t PartitionMetadata::ByteSizeLong() const {
  const PartitionMetadata& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.PartitionMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  {
    // repeated int32 replicas = 3;
    {
      total_size += ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(this_._internal_replicas(), 1,
                                                                       this_._impl_._replicas_cached_byte_size_);
    }
    // repeated int32 isr = 4;
    {
      total_size += ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(this_._internal_isr(), 1,
                                                                       this_._impl_._isr_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // int32 partition = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (this_._internal_partition() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partition());
      }
    }
    // int32 leader = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_leader() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_leader());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void PartitionMetadata::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                  const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PartitionMetadata*>(&to_msg);
  auto& from = static_cast<const PartitionMetadata&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.PartitionMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  _this->_internal_mutable_replicas()->MergeFrom(from._internal_replicas());
  _this->_internal_mutable_isr()->MergeFrom(from._internal_isr());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (from._internal_partition() != 0) {
        _this->_impl_.partition_ = from._impl_.partition_;
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_leader() != 0) {
        _this->_impl_.leader_ = from._impl_.leader_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionMetadata::CopyFrom(const PartitionMetadata& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.PartitionMetadata)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void PartitionMetadata::InternalSwap(PartitionMetadata* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.replicas_.InternalSwap(&other->_impl_.replicas_);
  _impl_.isr_.InternalSwap(&other->_impl_.isr_);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.leader_) +
                                        sizeof(PartitionMetadata::_impl_.leader_) -
                                        PROTOBUF_FIELD_OFFSET(PartitionMetadata, _impl_.partition_)>(
      reinterpret_cast<char*>(&_impl_.partition_), reinterpret_cast<char*>(&other->_impl_.partition_));
}

::google::protobuf::Metadata PartitionMetadata::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DescribeTopicRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<DescribeTopicRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(DescribeTopicRequest, _impl_._has_bits_);
};

DescribeTopicRequest::DescribeTopicRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DescribeTopicRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.DescribeTopicRequest)
}
PROTOBUF_NDEBUG_INLINE DescribeTopicRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::DescribeTopicRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, topic_(arena, from.topic_) {
}

DescribeTopicRequest::DescribeTopicRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                           const DescribeTopicRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DescribeTopicRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  DescribeTopicRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:streamit.v1.DescribeTopicRequest)
}
PROTOBUF_NDEBUG_INLINE DescribeTopicRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, topic_(arena) {
}

inline void DescribeTopicRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DescribeTopicRequest::~DescribeTopicRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.DescribeTopicRequest)
  SharedDtor(*this);
}
inline void DescribeTopicRequest::SharedDtor(MessageLite& self) {
  DescribeTopicRequest& this_ = static_cast<DescribeTopicRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DescribeTopicRequest::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                  void* PROTOBUF_NONNULL mem,
                                                                  ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DescribeTopicRequest(arena);
}
constexpr auto DescribeTopicRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DescribeTopicRequest),
                                                                alignof(DescribeTopicRequest));
}
constexpr auto DescribeTopicRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DescribeTopicRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &DescribeTopicRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DescribeTopicRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DescribeTopicRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DescribeTopicRequest>(),
          &DescribeTopicRequest::ByteSizeLong,
          &DescribeTopicRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DescribeTopicRequest, _impl_._cached_size_),
          false,
      },
      &DescribeTopicRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    DescribeTopicRequest_class_data_ = DescribeTopicRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DescribeTopicRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DescribeTopicRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DescribeTopicRequest_class_data_.tc_table);
  return DescribeTopicRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<0, 1, 0, 46, 2>
    DescribeTopicRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(DescribeTopicRequest, _impl_._has_bits_),
            0, // no _extensions_
            1,
            0, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967294, // skipmap
            offsetof(decltype(_table_), field_entries),
            1,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            DescribeTopicRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::DescribeTopicRequest>(), // to_prefetch
#endif                                                                          // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(DescribeTopicRequest, _impl_.topic_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(DescribeTopicRequest, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        // no aux_entries
        {{"\40\5\0\0\0\0\0\0"
          "streamit.v1.DescribeTopicRequest"
          "topic"}},
    };
PROTOBUF_NOINLINE void DescribeTopicRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.DescribeTopicRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DescribeTopicRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DescribeTopicRequest& this_ = static_cast<const DescribeTopicRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DescribeTopicRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DescribeTopicRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.DescribeTopicRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.DescribeTopicRequest.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.DescribeTopicRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DescribeTopicRequest::ByteSizeLong(const MessageLite& base) {
  const DescribeTopicRequest& this_ = static_cast<const DescribeTopicRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t DescribeTopicRequest::ByteSizeLong() const {
  const DescribeTopicRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.DescribeTopicRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  {
    // string topic = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void DescribeTopicRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                     const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DescribeTopicRequest*>(&to_msg);
  auto& from = static_cast<const DescribeTopicRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.DescribeTopicRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!from._internal_topic().empty()) {
      _this->_internal_set_topic(from._internal_topic());
    } else {
      if (_this->_impl_.topic_.IsDefault()) {
        _this->_internal_set_topic("");
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeTopicRequest::CopyFrom(const DescribeTopicRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.DescribeTopicRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DescribeTopicRequest::InternalSwap(DescribeTopicRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
}

::google::protobuf::Metadata DescribeTopicRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DescribeTopicResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<DescribeTopicResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_._has_bits_);
};

DescribeTopicResponse::DescribeTopicResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DescribeTopicResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.DescribeTopicResponse)
}
PROTOBUF_NDEBUG_INLINE DescribeTopicResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::DescribeTopicResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, error_message_(arena, from.error_message_) {
}

DescribeTopicResponse::DescribeTopicResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                             const DescribeTopicResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, DescribeTopicResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  DescribeTopicResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.metadata_ = ((cached_has_bits & 0x00000002U) != 0)
                         ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_)
                         : nullptr;
  _impl_.error_code_ = from._impl_.error_code_;

  // @@protoc_insertion_point(copy_constructor:streamit.v1.DescribeTopicResponse)
}
PROTOBUF_NDEBUG_INLINE DescribeTopicResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, error_message_(arena) {
}

inline void DescribeTopicResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, metadata_), 0,
           offsetof(Impl_, error_code_) - offsetof(Impl_, metadata_) + sizeof(Impl_::error_code_));
}
DescribeTopicResponse::~DescribeTopicResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.DescribeTopicResponse)
  SharedDtor(*this);
}
inline void DescribeTopicResponse::SharedDtor(MessageLite& self) {
  DescribeTopicResponse& this_ = static_cast<DescribeTopicResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  delete this_._impl_.metadata_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL DescribeTopicResponse::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                   void* PROTOBUF_NONNULL mem,
                                                                   ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) DescribeTopicResponse(arena);
}
constexpr auto DescribeTopicResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DescribeTopicResponse),
                                                                alignof(DescribeTopicResponse));
}
constexpr auto DescribeTopicResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_DescribeTopicResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &DescribeTopicResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<DescribeTopicResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &DescribeTopicResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<DescribeTopicResponse>(),
          &DescribeTopicResponse::ByteSizeLong,
          &DescribeTopicResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_._cached_size_),
          false,
      },
      &DescribeTopicResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    DescribeTopicResponse_class_data_ = DescribeTopicResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
DescribeTopicResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&DescribeTopicResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(DescribeTopicResponse_class_data_.tc_table);
  return DescribeTopicResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<2, 3, 1, 55, 2>
    DescribeTopicResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_._has_bits_),
            0, // no _extensions_
            3,
            24, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967288, // skipmap
            offsetof(decltype(_table_), field_entries),
            3, // num_field_entries
            1, // num_aux_entries
            offsetof(decltype(_table_), aux_entries),
            DescribeTopicResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::DescribeTopicResponse>(), // to_prefetch
#endif                                                                           // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // .streamit.v1.TopicMetadata metadata = 1;
            {::_pbi::TcParser::FastMtS1, {10, 1, 0, PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.metadata_)}},
            // .streamit.v1.ErrorCode error_code = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DescribeTopicResponse, _impl_.error_code_),
                                                    2>(),
             {16, 2, 0, PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.error_code_)}},
            // string error_message = 3;
            {::_pbi::TcParser::FastUS1,
             {26, 0, 0, PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.error_message_)}},
        }},
        {{65535, 65535}},
        {{
            // .streamit.v1.TopicMetadata metadata = 1;
            {PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.metadata_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
            // .streamit.v1.ErrorCode error_code = 2;
            {PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 3;
            {PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        {{
            {::_pbi::TcParser::GetTable<::streamit::v1::TopicMetadata>()},
        }},
        {{"\41\0\0\15\0\0\0\0"
          "streamit.v1.DescribeTopicResponse"
          "error_message"}},
    };
PROTOBUF_NOINLINE void DescribeTopicResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.DescribeTopicResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(_impl_.metadata_ != nullptr);
      _impl_.metadata_->Clear();
    }
  }
  _impl_.error_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL DescribeTopicResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const DescribeTopicResponse& this_ = static_cast<const DescribeTopicResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL DescribeTopicResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const DescribeTopicResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.DescribeTopicResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // .streamit.v1.TopicMetadata metadata = 1;
  if ((cached_has_bits & 0x00000002U) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.metadata_, this_._impl_.metadata_->GetCachedSize(), target, stream);
  }

  // .streamit.v1.ErrorCode error_code = 2;
  if ((cached_has_bits & 0x00000004U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(2, this_._internal_error_code(), target);
    }
  }

  // string error_message = 3;
  if ((cached_has_bits & 0x00000001U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.DescribeTopicResponse.error_message");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.DescribeTopicResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t DescribeTopicResponse::ByteSizeLong(const MessageLite& base) {
  const DescribeTopicResponse& this_ = static_cast<const DescribeTopicResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t DescribeTopicResponse::ByteSizeLong() const {
  const DescribeTopicResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.DescribeTopicResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    // string error_message = 3;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // .streamit.v1.TopicMetadata metadata = 1;
    if ((cached_has_bits & 0x00000002U) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metadata_);
    }
    // .streamit.v1.ErrorCode error_code = 2;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void DescribeTopicResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                      const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DescribeTopicResponse*>(&to_msg);
  auto& from = static_cast<const DescribeTopicResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.DescribeTopicResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      ABSL_DCHECK(from._impl_.metadata_ != nullptr);
      if (_this->_impl_.metadata_ == nullptr) {
        _this->_impl_.metadata_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.metadata_);
      } else {
        _this->_impl_.metadata_->MergeFrom(*from._impl_.metadata_);
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DescribeTopicResponse::CopyFrom(const DescribeTopicResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.DescribeTopicResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void DescribeTopicResponse::InternalSwap(DescribeTopicResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.error_code_) +
                                        sizeof(DescribeTopicResponse::_impl_.error_code_) -
                                        PROTOBUF_FIELD_OFFSET(DescribeTopicResponse, _impl_.metadata_)>(
      reinterpret_cast<char*>(&_impl_.metadata_), reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::google::protobuf::Metadata DescribeTopicResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FindLeaderRequest::_Internal {
public:
  using HasBits = decltype(::std::declval<FindLeaderRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_._has_bits_);
};

FindLeaderRequest::FindLeaderRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FindLeaderRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.FindLeaderRequest)
}
PROTOBUF_NDEBUG_INLINE FindLeaderRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::FindLeaderRequest& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, topic_(arena, from.topic_) {
}

FindLeaderRequest::FindLeaderRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const FindLeaderRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FindLeaderRequest_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  FindLeaderRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.partition_ = from._impl_.partition_;

  // @@protoc_insertion_point(copy_constructor:streamit.v1.FindLeaderRequest)
}
PROTOBUF_NDEBUG_INLINE FindLeaderRequest::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, topic_(arena) {
}

inline void FindLeaderRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.partition_ = {};
}
FindLeaderRequest::~FindLeaderRequest() {
  // @@protoc_insertion_point(destructor:streamit.v1.FindLeaderRequest)
  SharedDtor(*this);
}
inline void FindLeaderRequest::SharedDtor(MessageLite& self) {
  FindLeaderRequest& this_ = static_cast<FindLeaderRequest&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.topic_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FindLeaderRequest::PlacementNew_(const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
                                                               ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FindLeaderRequest(arena);
}
constexpr auto FindLeaderRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FindLeaderRequest), alignof(FindLeaderRequest));
}
constexpr auto FindLeaderRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FindLeaderRequest_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &FindLeaderRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FindLeaderRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FindLeaderRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FindLeaderRequest>(),
          &FindLeaderRequest::ByteSizeLong,
          &FindLeaderRequest::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_._cached_size_),
          false,
      },
      &FindLeaderRequest::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    FindLeaderRequest_class_data_ = FindLeaderRequest::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FindLeaderRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FindLeaderRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FindLeaderRequest_class_data_.tc_table);
  return FindLeaderRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<1, 2, 0, 43, 2>
    FindLeaderRequest::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_._has_bits_),
            0, // no _extensions_
            2,
            8, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967292, // skipmap
            offsetof(decltype(_table_), field_entries),
            2,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            FindLeaderRequest_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::FindLeaderRequest>(), // to_prefetch
#endif                                                                       // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            // int32 partition = 2;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindLeaderRequest, _impl_.partition_), 1>(),
             {16, 1, 0, PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_.partition_)}},
            // string topic = 1;
            {::_pbi::TcParser::FastUS1, {10, 0, 0, PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_.topic_)}},
        }},
        {{65535, 65535}},
        {{
            // string topic = 1;
            {PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_.topic_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 partition = 2;
            {PROTOBUF_FIELD_OFFSET(FindLeaderRequest, _impl_.partition_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
        }},
        // no aux_entries
        {{"\35\5\0\0\0\0\0\0"
          "streamit.v1.FindLeaderRequest"
          "topic"}},
    };
PROTOBUF_NOINLINE void FindLeaderRequest::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.FindLeaderRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001U) != 0) {
    _impl_.topic_.ClearNonDefaultToEmpty();
  }
  _impl_.partition_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
FindLeaderRequest::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FindLeaderRequest& this_ = static_cast<const FindLeaderRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FindLeaderRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FindLeaderRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.FindLeaderRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_topic().empty()) {
      const ::std::string& _s = this_._internal_topic();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FindLeaderRequest.topic");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int32 partition = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (this_._internal_partition() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
          stream, this_._internal_partition(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.FindLeaderRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FindLeaderRequest::ByteSizeLong(const MessageLite& base) {
  const FindLeaderRequest& this_ = static_cast<const FindLeaderRequest&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t FindLeaderRequest::ByteSizeLong() const {
  const FindLeaderRequest& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.FindLeaderRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    // string topic = 1;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_topic().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_topic());
      }
    }
    // int32 partition = 2;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (this_._internal_partition() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_partition());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void FindLeaderRequest::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                  const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FindLeaderRequest*>(&to_msg);
  auto& from = static_cast<const FindLeaderRequest&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.FindLeaderRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_topic().empty()) {
        _this->_internal_set_topic(from._internal_topic());
      } else {
        if (_this->_impl_.topic_.IsDefault()) {
          _this->_internal_set_topic("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (from._internal_partition() != 0) {
        _this->_impl_.partition_ = from._impl_.partition_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindLeaderRequest::CopyFrom(const FindLeaderRequest& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.FindLeaderRequest)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FindLeaderRequest::InternalSwap(FindLeaderRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, &other->_impl_.topic_, arena);
  swap(_impl_.partition_, other->_impl_.partition_);
}

::google::protobuf::Metadata FindLeaderRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FindLeaderResponse::_Internal {
public:
  using HasBits = decltype(::std::declval<FindLeaderResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset = 8 * PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_._has_bits_);
};

FindLeaderResponse::FindLeaderResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FindLeaderResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:streamit.v1.FindLeaderResponse)
}
PROTOBUF_NDEBUG_INLINE FindLeaderResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    [[maybe_unused]] const ::streamit::v1::FindLeaderResponse& from_msg)
    : _has_bits_{from._has_bits_}, _cached_size_{0}, leader_host_(arena, from.leader_host_),
      error_message_(arena, from.error_message_) {
}

FindLeaderResponse::FindLeaderResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
                                       const FindLeaderResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, FindLeaderResponse_class_data_.base()) {
#else  // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif // PROTOBUF_CUSTOM_VTABLE
  FindLeaderResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, leader_broker_id_),
           reinterpret_cast<const char*>(&from._impl_) + offsetof(Impl_, leader_broker_id_),
           offsetof(Impl_, error_code_) - offsetof(Impl_, leader_broker_id_) + sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:streamit.v1.FindLeaderResponse)
}
PROTOBUF_NDEBUG_INLINE FindLeaderResponse::Impl_::Impl_(
    [[maybe_unused]] ::google::protobuf::internal::InternalVisibility visibility,
    [[maybe_unused]] ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
    : _cached_size_{0}, leader_host_(arena), error_message_(arena) {
}

inline void FindLeaderResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char*>(&_impl_) + offsetof(Impl_, leader_broker_id_), 0,
           offsetof(Impl_, error_code_) - offsetof(Impl_, leader_broker_id_) + sizeof(Impl_::error_code_));
}
FindLeaderResponse::~FindLeaderResponse() {
  // @@protoc_insertion_point(destructor:streamit.v1.FindLeaderResponse)
  SharedDtor(*this);
}
inline void FindLeaderResponse::SharedDtor(MessageLite& self) {
  FindLeaderResponse& this_ = static_cast<FindLeaderResponse&>(self);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.leader_host_.Destroy();
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL FindLeaderResponse::PlacementNew_(const void* PROTOBUF_NONNULL,
                                                                void* PROTOBUF_NONNULL mem,
                                                                ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) FindLeaderResponse(arena);
}
constexpr auto FindLeaderResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FindLeaderResponse),
                                                                alignof(FindLeaderResponse));
}
constexpr auto FindLeaderResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_FindLeaderResponse_default_instance_._instance,
          &_table_.header,
          nullptr, // OnDemandRegisterArenaDtor
          nullptr, // IsInitialized
          &FindLeaderResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<FindLeaderResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &FindLeaderResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<FindLeaderResponse>(),
          &FindLeaderResponse::ByteSizeLong,
          &FindLeaderResponse::_InternalSerialize,
#endif // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_._cached_size_),
          false,
      },
      &FindLeaderResponse::kDescriptorMethods,
      &descriptor_table_proto_2fstreamit_2eproto,
      nullptr, // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
    FindLeaderResponse_class_data_ = FindLeaderResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
FindLeaderResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&FindLeaderResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(FindLeaderResponse_class_data_.tc_table);
  return FindLeaderResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::_pbi::TcParseTable<3, 5, 0, 63, 2>
    FindLeaderResponse::_table_ = {
        {
            PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_._has_bits_),
            0, // no _extensions_
            5,
            56, // max_field_number, fast_idx_mask
            offsetof(decltype(_table_), field_lookup_table),
            4294967264, // skipmap
            offsetof(decltype(_table_), field_entries),
            5,                                        // num_field_entries
            0,                                        // num_aux_entries
            offsetof(decltype(_table_), field_names), // no aux_entries
            FindLeaderResponse_class_data_.base(),
            nullptr,                           // post_loop_handler
            ::_pbi::TcParser::GenericFallback, // fallback
#ifdef PROTOBUF_PREFETCH_PARSE_TABLE
            ::_pbi::TcParser::GetTable<::streamit::v1::FindLeaderResponse>(), // to_prefetch
#endif                                                                        // PROTOBUF_PREFETCH_PARSE_TABLE
        },
        {{
            {::_pbi::TcParser::MiniParse, {}},
            // int32 leader_broker_id = 1;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindLeaderResponse, _impl_.leader_broker_id_),
                                                    2>(),
             {8, 2, 0, PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_broker_id_)}},
            // string leader_host = 2;
            {::_pbi::TcParser::FastUS1, {18, 0, 0, PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_host_)}},
            // int32 leader_port = 3;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindLeaderResponse, _impl_.leader_port_), 3>(),
             {24, 3, 0, PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_port_)}},
            // .streamit.v1.ErrorCode error_code = 4;
            {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindLeaderResponse, _impl_.error_code_), 4>(),
             {32, 4, 0, PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.error_code_)}},
            // string error_message = 5;
            {::_pbi::TcParser::FastUS1, {42, 1, 0, PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.error_message_)}},
            {::_pbi::TcParser::MiniParse, {}},
            {::_pbi::TcParser::MiniParse, {}},
        }},
        {{65535, 65535}},
        {{
            // int32 leader_broker_id = 1;
            {PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_broker_id_), _Internal::kHasBitsOffset + 2, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // string leader_host = 2;
            {PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_host_), _Internal::kHasBitsOffset + 0, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
            // int32 leader_port = 3;
            {PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_port_), _Internal::kHasBitsOffset + 3, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
            // .streamit.v1.ErrorCode error_code = 4;
            {PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.error_code_), _Internal::kHasBitsOffset + 4, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
            // string error_message = 5;
            {PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 1, 0,
             (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
        }},
        // no aux_entries
        {{"\36\0\13\0\0\15\0\0"
          "streamit.v1.FindLeaderResponse"
          "leader_host"
          "error_message"}},
    };
PROTOBUF_NOINLINE void FindLeaderResponse::Clear() {
  // @@protoc_insertion_point(message_clear_start:streamit.v1.FindLeaderResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003U) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      _impl_.leader_host_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cU) != 0) {
    ::memset(&_impl_.leader_broker_id_, 0,
             static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
                                   reinterpret_cast<char*>(&_impl_.leader_broker_id_)) +
                 sizeof(_impl_.error_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL
FindLeaderResponse::_InternalSerialize(const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
                                       ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const FindLeaderResponse& this_ = static_cast<const FindLeaderResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL FindLeaderResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target, ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const FindLeaderResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    this_.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(serialize_to_array_start:streamit.v1.FindLeaderResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 leader_broker_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000004U) != 0) {
    if (this_._internal_leader_broker_id() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
          stream, this_._internal_leader_broker_id(), target);
    }
  }

  // string leader_host = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000001U) != 0) {
    if (!this_._internal_leader_host().empty()) {
      const ::std::string& _s = this_._internal_leader_host();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FindLeaderResponse.leader_host");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // int32 leader_port = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000008U) != 0) {
    if (this_._internal_leader_port() != 0) {
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
          stream, this_._internal_leader_port(), target);
    }
  }

  // .streamit.v1.ErrorCode error_code = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000010U) != 0) {
    if (this_._internal_error_code() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(4, this_._internal_error_code(), target);
    }
  }

  // string error_message = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000002U) != 0) {
    if (!this_._internal_error_message().empty()) {
      const ::std::string& _s = this_._internal_error_message();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "streamit.v1.FindLeaderResponse.error_message");
      target = stream->WriteStringMaybeAliased(5, _s, target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(
            ::google::protobuf::UnknownFieldSet::default_instance),
        target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:streamit.v1.FindLeaderResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t FindLeaderResponse::ByteSizeLong(const MessageLite& base) {
  const FindLeaderResponse& this_ = static_cast<const FindLeaderResponse&>(base);
#else  // PROTOBUF_CUSTOM_VTABLE
::size_t FindLeaderResponse::ByteSizeLong() const {
  const FindLeaderResponse& this_ = *this;
#endif // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:streamit.v1.FindLeaderResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    // string leader_host = 2;
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!this_._internal_leader_host().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_leader_host());
      }
    }
    // string error_message = 5;
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!this_._internal_error_message().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this_._internal_error_message());
      }
    }
    // int32 leader_broker_id = 1;
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (this_._internal_leader_broker_id() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_leader_broker_id());
      }
    }
    // int32 leader_port = 3;
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (this_._internal_leader_port() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this_._internal_leader_port());
      }
    }
    // .streamit.v1.ErrorCode error_code = 4;
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (this_._internal_error_code() != 0) {
        total_size += 1 + ::_pbi::WireFormatLite::EnumSize(this_._internal_error_code());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size, &this_._impl_._cached_size_);
}

void FindLeaderResponse::MergeImpl(::google::protobuf::MessageLite& to_msg,
                                   const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FindLeaderResponse*>(&to_msg);
  auto& from = static_cast<const FindLeaderResponse&>(from_msg);
  if constexpr (::_pbi::DebugHardenVerifyHasBitConsistency()) {
    from.VerifyHasBitConsistency();
  }
  // @@protoc_insertion_point(class_specific_merge_from_start:streamit.v1.FindLeaderResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fU) != 0) {
    if ((cached_has_bits & 0x00000001U) != 0) {
      if (!from._internal_leader_host().empty()) {
        _this->_internal_set_leader_host(from._internal_leader_host());
      } else {
        if (_this->_impl_.leader_host_.IsDefault()) {
          _this->_internal_set_leader_host("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002U) != 0) {
      if (!from._internal_error_message().empty()) {
        _this->_internal_set_error_message(from._internal_error_message());
      } else {
        if (_this->_impl_.error_message_.IsDefault()) {
          _this->_internal_set_error_message("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004U) != 0) {
      if (from._internal_leader_broker_id() != 0) {
        _this->_impl_.leader_broker_id_ = from._impl_.leader_broker_id_;
      }
    }
    if ((cached_has_bits & 0x00000008U) != 0) {
      if (from._internal_leader_port() != 0) {
        _this->_impl_.leader_port_ = from._impl_.leader_port_;
      }
    }
    if ((cached_has_bits & 0x00000010U) != 0) {
      if (from._internal_error_code() != 0) {
        _this->_impl_.error_code_ = from._impl_.error_code_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindLeaderResponse::CopyFrom(const FindLeaderResponse& from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:streamit.v1.FindLeaderResponse)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void FindLeaderResponse::InternalSwap(FindLeaderResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.leader_host_, &other->_impl_.leader_host_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.error_code_) +
                                        sizeof(FindLeaderResponse::_impl_.error_code_) -
                                        PROTOBUF_FIELD_OFFSET(FindLeaderResponse, _impl_.leader_broker_id_)>(
      reinterpret_cast<char*>(&_impl_.leader_broker_id_), reinterpret_cast<char*>(&other->_impl_.leader_broker_id_));
}

::google::protobuf::Metadata FindLeaderResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
} // namespace v1
} // namespace streamit
namespace google {
namespace protobuf {} // namespace protobuf
} // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type _static_init2_ [[maybe_unused]] =
    (::_pbi::AddDescriptors(&descriptor_table_proto_2fstreamit_2eproto), ::std::false_type{});
#include "google/protobuf/port_undef.inc"
