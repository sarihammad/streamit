name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        sanitizer: [none, asan, ubsan]
        exclude:
          - compiler: clang
            sanitizer: asan  # Skip ASAN with Clang for now
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            protobuf-compiler \
            libprotobuf-dev \
            libgrpc++-dev \
            libspdlog-dev \
            libfmt-dev \
            pkg-config \
            git \
            wget \
            unzip
          
          # Install Abseil from source
          cd /tmp
          wget https://github.com/abseil/abseil-cpp/archive/refs/tags/20240116.2.tar.gz
          tar -xzf 20240116.2.tar.gz
          cd abseil-cpp-20240116.2
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          
          # Skip prometheus-cpp for now - will use simple metrics implementation
          
      - name: Verify protobuf files exist
        run: |
          if [ ! -f "src/proto/streamit.pb.h" ] || [ ! -f "src/proto/streamit.grpc.pb.h" ]; then
            echo "Protobuf files missing, this should not happen"
            exit 1
          fi
          echo "Protobuf files found, proceeding with build"
          
      - name: Configure CMake
        run: |
          cmake -S . -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DSTREAMIT_WARNINGS_AS_ERRORS=ON \
            -DSTREAMIT_ASAN=${{ matrix.sanitizer == 'asan' && 'ON' || 'OFF' }} \
            -DSTREAMIT_UBSAN=${{ matrix.sanitizer == 'ubsan' && 'ON' || 'OFF' }} \
            -DSTREAMIT_TSAN=OFF \
            -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }}
            
      - name: Build
        run: cmake --build build -j $(nproc)
        
      - name: Run unit tests
        run: |
          cd build
          ctest --output-on-failure --label-exclude integration,chaos
          
      - name: Run integration tests
        if: matrix.sanitizer == 'none' && matrix.compiler == 'gcc'
        run: |
          cd build
          ctest --output-on-failure --label-regex integration
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.compiler }}-${{ matrix.sanitizer }}
          path: build/Testing/
          
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            clang-format \
            clang-tidy \
            build-essential \
            cmake \
            ninja-build \
            protobuf-compiler \
            libprotobuf-dev \
            libgrpc++-dev \
            libspdlog-dev \
            libfmt-dev \
            git \
            wget \
            unzip
          
          # Install Abseil from source
          cd /tmp
          wget https://github.com/abseil/abseil-cpp/archive/refs/tags/20240116.2.tar.gz
          tar -xzf 20240116.2.tar.gz
          cd abseil-cpp-20240116.2
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          
          # Skip prometheus-cpp for now - will use simple metrics implementation
          
      - name: Verify protobuf files exist
        run: |
          if [ ! -f "src/proto/streamit.pb.h" ] || [ ! -f "src/proto/streamit.grpc.pb.h" ]; then
            echo "Protobuf files missing, this should not happen"
            exit 1
          fi
          echo "Protobuf files found, proceeding with build"
          
      - name: Run clang-format
        run: |
          find . -name "*.h" -o -name "*.cc" | grep -v build | xargs clang-format --dry-run --Werror
          
      - name: Run clang-tidy
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build build
          find . -name "*.h" -o -name "*.cc" | grep -v build | xargs clang-tidy --config-file=.clang-tidy
          
  docker:
    runs-on: ubuntu-latest
    needs: [build-test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker images
        run: |
          docker build -f docker/broker.Dockerfile -t streamit-broker:latest .
          docker build -f docker/controller.Dockerfile -t streamit-controller:latest .
          docker build -f docker/coordinator.Dockerfile -t streamit-coordinator:latest .
          
      - name: Test Docker Compose
        run: |
          docker-compose up --build -d
          sleep 30
          docker-compose ps
          docker-compose logs
          docker-compose down
          
  chaos-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            protobuf-compiler \
            libprotobuf-dev \
            libgrpc++-dev \
            libspdlog-dev \
            libfmt-dev \
            git \
            wget \
            unzip
          
          # Install Abseil from source
          cd /tmp
          wget https://github.com/abseil/abseil-cpp/archive/refs/tags/20240116.2.tar.gz
          tar -xzf 20240116.2.tar.gz
          cd abseil-cpp-20240116.2
          mkdir build && cd build
          cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_BUILD_TYPE=Release ..
          make -j$(nproc)
          sudo make install
          
          # Skip prometheus-cpp for now - will use simple metrics implementation
          
      - name: Verify protobuf files exist
        run: |
          if [ ! -f "src/proto/streamit.pb.h" ] || [ ! -f "src/proto/streamit.grpc.pb.h" ]; then
            echo "Protobuf files missing, this should not happen"
            exit 1
          fi
          echo "Protobuf files found, proceeding with build"
          
      - name: Build
        run: |
          cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo
          cmake --build build -j $(nproc)
          
      - name: Run chaos tests
        run: |
          cd build
          ctest --output-on-failure --label-regex chaos
          
  # security-scan: Disabled due to permission requirements
  # Uncomment and configure if security scanning is needed
  # security-scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         scan-ref: '.'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #         
  #     - name: Upload Trivy scan results
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: 'trivy-results.sarif'
